//
// D2pGenerateRequestMeta.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Embeds extra information in the d2p token to pass from the desktop to handoff session.  NOTE: changes to this struct should be backwards-compatible since we may use this struct  to deserialize old versions */
public struct D2pGenerateRequestMeta: Codable, JSONEncodable, Hashable {

    public var l10n: D2pGenerateRequestMetaL10n?
    public var opener: String?
    public var redirectUrl: String?
    public var sandboxIdDocOutcome: String?
    public var sessionId: String?
    public var styleParams: String?

    public init(l10n: D2pGenerateRequestMetaL10n? = nil, opener: String? = nil, redirectUrl: String? = nil, sandboxIdDocOutcome: String? = nil, sessionId: String? = nil, styleParams: String? = nil) {
        self.l10n = l10n
        self.opener = opener
        self.redirectUrl = redirectUrl
        self.sandboxIdDocOutcome = sandboxIdDocOutcome
        self.sessionId = sessionId
        self.styleParams = styleParams
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case l10n
        case opener
        case redirectUrl = "redirect_url"
        case sandboxIdDocOutcome = "sandbox_id_doc_outcome"
        case sessionId = "session_id"
        case styleParams = "style_params"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(l10n, forKey: .l10n)
        try container.encodeIfPresent(opener, forKey: .opener)
        try container.encodeIfPresent(redirectUrl, forKey: .redirectUrl)
        try container.encodeIfPresent(sandboxIdDocOutcome, forKey: .sandboxIdDocOutcome)
        try container.encodeIfPresent(sessionId, forKey: .sessionId)
        try container.encodeIfPresent(styleParams, forKey: .styleParams)
    }
}

