//
// UserChallengeResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct UserChallengeResponse: Codable, JSONEncodable, Hashable {

    /** If the challenge kind is biometric, the challenge JSON for the browser */
    public var biometricChallengeJson: String?
    /** Information saved client side and sent back with the challenge response */
    public var challengeToken: String
    /** The timeout until you're allowed to initiate another challenge */
    public var timeBeforeRetryS: Int64

    public init(biometricChallengeJson: String? = nil, challengeToken: String, timeBeforeRetryS: Int64) {
        self.biometricChallengeJson = biometricChallengeJson
        self.challengeToken = challengeToken
        self.timeBeforeRetryS = timeBeforeRetryS
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case biometricChallengeJson = "biometric_challenge_json"
        case challengeToken = "challenge_token"
        case timeBeforeRetryS = "time_before_retry_s"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(biometricChallengeJson, forKey: .biometricChallengeJson)
        try container.encode(challengeToken, forKey: .challengeToken)
        try container.encode(timeBeforeRetryS, forKey: .timeBeforeRetryS)
    }
}

