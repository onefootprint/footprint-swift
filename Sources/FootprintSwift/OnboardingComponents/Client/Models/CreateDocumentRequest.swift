//
// CreateDocumentRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct CreateDocumentRequest: Codable, JSONEncodable, Hashable {

    public enum CountryCode: String, Codable, CaseIterable {
        case tw = "TW"
        case af = "AF"
        case al = "AL"
        case dz = "DZ"
        case _as = "AS"
        case ad = "AD"
        case ao = "AO"
        case ai = "AI"
        case aq = "AQ"
        case ag = "AG"
        case ar = "AR"
        case am = "AM"
        case aw = "AW"
        case au = "AU"
        case at = "AT"
        case az = "AZ"
        case bs = "BS"
        case bh = "BH"
        case bd = "BD"
        case bb = "BB"
        case by = "BY"
        case be = "BE"
        case bz = "BZ"
        case bj = "BJ"
        case bm = "BM"
        case bt = "BT"
        case bo = "BO"
        case bq = "BQ"
        case ba = "BA"
        case bw = "BW"
        case bv = "BV"
        case br = "BR"
        case io = "IO"
        case vg = "VG"
        case bn = "BN"
        case bg = "BG"
        case bf = "BF"
        case bi = "BI"
        case cv = "CV"
        case kh = "KH"
        case cm = "CM"
        case ca = "CA"
        case ky = "KY"
        case cf = "CF"
        case td = "TD"
        case cl = "CL"
        case cn = "CN"
        case hk = "HK"
        case mo = "MO"
        case cx = "CX"
        case cc = "CC"
        case co = "CO"
        case km = "KM"
        case cg = "CG"
        case ck = "CK"
        case cr = "CR"
        case hr = "HR"
        case cu = "CU"
        case cw = "CW"
        case cy = "CY"
        case cz = "CZ"
        case ci = "CI"
        case kp = "KP"
        case cd = "CD"
        case dk = "DK"
        case dj = "DJ"
        case dm = "DM"
        case _do = "DO"
        case ec = "EC"
        case eg = "EG"
        case sv = "SV"
        case gq = "GQ"
        case er = "ER"
        case ee = "EE"
        case sz = "SZ"
        case et = "ET"
        case fk = "FK"
        case fo = "FO"
        case fj = "FJ"
        case fi = "FI"
        case fr = "FR"
        case gf = "GF"
        case pf = "PF"
        case tf = "TF"
        case ga = "GA"
        case gm = "GM"
        case ge = "GE"
        case de = "DE"
        case gh = "GH"
        case gi = "GI"
        case gr = "GR"
        case gl = "GL"
        case gd = "GD"
        case gp = "GP"
        case gu = "GU"
        case gt = "GT"
        case gg = "GG"
        case gn = "GN"
        case gw = "GW"
        case gy = "GY"
        case ht = "HT"
        case hm = "HM"
        case va = "VA"
        case hn = "HN"
        case hu = "HU"
        case _is = "IS"
        case _in = "IN"
        case id = "ID"
        case ir = "IR"
        case iq = "IQ"
        case ie = "IE"
        case im = "IM"
        case il = "IL"
        case it = "IT"
        case jm = "JM"
        case jp = "JP"
        case je = "JE"
        case jo = "JO"
        case kz = "KZ"
        case ke = "KE"
        case ki = "KI"
        case kw = "KW"
        case kg = "KG"
        case la = "LA"
        case lv = "LV"
        case lb = "LB"
        case ls = "LS"
        case lr = "LR"
        case ly = "LY"
        case li = "LI"
        case lt = "LT"
        case lu = "LU"
        case mg = "MG"
        case mw = "MW"
        case my = "MY"
        case mv = "MV"
        case ml = "ML"
        case mt = "MT"
        case mh = "MH"
        case mq = "MQ"
        case mr = "MR"
        case mu = "MU"
        case yt = "YT"
        case mx = "MX"
        case fm = "FM"
        case mc = "MC"
        case mn = "MN"
        case me = "ME"
        case ms = "MS"
        case ma = "MA"
        case mz = "MZ"
        case mm = "MM"
        case na = "NA"
        case nr = "NR"
        case np = "NP"
        case nl = "NL"
        case nc = "NC"
        case nz = "NZ"
        case ni = "NI"
        case ne = "NE"
        case ng = "NG"
        case nu = "NU"
        case nf = "NF"
        case mp = "MP"
        case no = "NO"
        case om = "OM"
        case pk = "PK"
        case pw = "PW"
        case pa = "PA"
        case pg = "PG"
        case py = "PY"
        case pe = "PE"
        case ph = "PH"
        case pn = "PN"
        case pl = "PL"
        case pt = "PT"
        case pr = "PR"
        case qa = "QA"
        case kr = "KR"
        case md = "MD"
        case ro = "RO"
        case ru = "RU"
        case rw = "RW"
        case re = "RE"
        case bl = "BL"
        case sh = "SH"
        case kn = "KN"
        case lc = "LC"
        case mf = "MF"
        case pm = "PM"
        case vc = "VC"
        case ws = "WS"
        case sm = "SM"
        case st = "ST"
        case sa = "SA"
        case sn = "SN"
        case rs = "RS"
        case sc = "SC"
        case sl = "SL"
        case sg = "SG"
        case sx = "SX"
        case sk = "SK"
        case si = "SI"
        case sb = "SB"
        case so = "SO"
        case za = "ZA"
        case gs = "GS"
        case ss = "SS"
        case es = "ES"
        case lk = "LK"
        case ps = "PS"
        case sd = "SD"
        case sr = "SR"
        case sj = "SJ"
        case se = "SE"
        case ch = "CH"
        case sy = "SY"
        case tj = "TJ"
        case th = "TH"
        case mk = "MK"
        case tl = "TL"
        case tg = "TG"
        case tk = "TK"
        case to = "TO"
        case tt = "TT"
        case tn = "TN"
        case tr = "TR"
        case tm = "TM"
        case tc = "TC"
        case tv = "TV"
        case ug = "UG"
        case ua = "UA"
        case ae = "AE"
        case gb = "GB"
        case tz = "TZ"
        case um = "UM"
        case vi = "VI"
        case us = "US"
        case uy = "UY"
        case uz = "UZ"
        case vu = "VU"
        case ve = "VE"
        case vn = "VN"
        case wf = "WF"
        case eh = "EH"
        case ye = "YE"
        case zm = "ZM"
        case zw = "ZW"
        case ax = "AX"
    }
    public enum DeviceType: String, Codable, CaseIterable {
        case desktop = "desktop"
        case mobile = "mobile"
    }
    public enum DocumentType: String, Codable, CaseIterable {
        case idCard = "id_card"
        case driversLicense = "drivers_license"
        case passport = "passport"
        case passportCard = "passport_card"
        case permit = "permit"
        case visa = "visa"
        case residenceDocument = "residence_document"
        case voterIdentification = "voter_identification"
        case ssnCard = "ssn_card"
        case proofOfAddress = "proof_of_address"
        case custom = "custom"
    }
    public enum FixtureResult: String, Codable, CaseIterable {
        case fail = "fail"
        case pass = "pass"
        case real = "real"
    }
    public var countryCode: CountryCode?
    public var deviceType: DeviceType?
    public var documentType: DocumentType
    public var fixtureResult: FixtureResult?
    public var requestId: String?
    public var skipSelfie: Bool?

    public init(countryCode: CountryCode? = nil, deviceType: DeviceType? = nil, documentType: DocumentType, fixtureResult: FixtureResult? = nil, requestId: String? = nil, skipSelfie: Bool? = nil) {
        self.countryCode = countryCode
        self.deviceType = deviceType
        self.documentType = documentType
        self.fixtureResult = fixtureResult
        self.requestId = requestId
        self.skipSelfie = skipSelfie
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case countryCode = "country_code"
        case deviceType = "device_type"
        case documentType = "document_type"
        case fixtureResult = "fixture_result"
        case requestId = "request_id"
        case skipSelfie = "skip_selfie"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(countryCode, forKey: .countryCode)
        try container.encodeIfPresent(deviceType, forKey: .deviceType)
        try container.encode(documentType, forKey: .documentType)
        try container.encodeIfPresent(fixtureResult, forKey: .fixtureResult)
        try container.encodeIfPresent(requestId, forKey: .requestId)
        try container.encodeIfPresent(skipSelfie, forKey: .skipSelfie)
    }
}

