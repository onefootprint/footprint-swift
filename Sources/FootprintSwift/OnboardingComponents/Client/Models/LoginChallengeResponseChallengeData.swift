//
// LoginChallengeResponseChallengeData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct LoginChallengeResponseChallengeData: Codable, JSONEncodable, Hashable {

    public enum ChallengeKind: String, Codable, CaseIterable {
        case sms = "sms"
        case biometric = "biometric"
        case email = "email"
    }
    public var biometricChallengeJson: String?
    public var challengeKind: ChallengeKind
    /** Encrypted, base64-encoded challenge information */
    public var challengeToken: String
    public var timeBeforeRetryS: Int64
    /** Auth token to pass to the verify call */
    public var token: String

    public init(biometricChallengeJson: String? = nil, challengeKind: ChallengeKind, challengeToken: String, timeBeforeRetryS: Int64, token: String) {
        self.biometricChallengeJson = biometricChallengeJson
        self.challengeKind = challengeKind
        self.challengeToken = challengeToken
        self.timeBeforeRetryS = timeBeforeRetryS
        self.token = token
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case biometricChallengeJson = "biometric_challenge_json"
        case challengeKind = "challenge_kind"
        case challengeToken = "challenge_token"
        case timeBeforeRetryS = "time_before_retry_s"
        case token
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(biometricChallengeJson, forKey: .biometricChallengeJson)
        try container.encode(challengeKind, forKey: .challengeKind)
        try container.encode(challengeToken, forKey: .challengeToken)
        try container.encode(timeBeforeRetryS, forKey: .timeBeforeRetryS)
        try container.encode(token, forKey: .token)
    }
}

