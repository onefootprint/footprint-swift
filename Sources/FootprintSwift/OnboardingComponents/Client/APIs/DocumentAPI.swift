//
// DocumentAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class DocumentAPI {

    /**

     - parameter id: (path)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: DocumentResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedDocumentsIdProcessPost(id: String, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> DocumentResponse {
        return try await hostedDocumentsIdProcessPostWithRequestBuilder(id: id, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/documents/{id}/process
     - Process the document and run any vendor verifications.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter id: (path)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<DocumentResponse> 
     */
    open class func hostedDocumentsIdProcessPostWithRequestBuilder(id: String, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<DocumentResponse> {
        var localVariablePath = "/hosted/documents/{id}/process"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DocumentResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**
     * enum for parameter side
     */
    public enum Side_hostedDocumentsIdUploadSidePost: String, CaseIterable {
        case front = "front"
        case back = "back"
        case selfie = "selfie"
    }

    /**

     - parameter id: (path)  
     - parameter side: (path)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedDocumentsIdUploadSidePost(id: String, side: Side_hostedDocumentsIdUploadSidePost, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedDocumentsIdUploadSidePostWithRequestBuilder(id: id, side: side, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/documents/{id}/upload/{side}
     - Upload an image for the given side to the provided document.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter id: (path)  
     - parameter side: (path)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedDocumentsIdUploadSidePostWithRequestBuilder(id: String, side: Side_hostedDocumentsIdUploadSidePost, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        var localVariablePath = "/hosted/documents/{id}/upload/{side}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let sidePreEscape = "\(side.rawValue)"
        let sidePostEscape = sidePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{side}", with: sidePostEscape, options: .literal, range: nil)
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter createDocumentRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: CreateDocumentResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedDocumentsPost(createDocumentRequest: CreateDocumentRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> CreateDocumentResponse {
        return try await hostedDocumentsPostWithRequestBuilder(createDocumentRequest: createDocumentRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/documents
     - Create a new document for the outstanding document request
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter createDocumentRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<CreateDocumentResponse> 
     */
    open class func hostedDocumentsPostWithRequestBuilder(createDocumentRequest: CreateDocumentRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<CreateDocumentResponse> {
        let localVariablePath = "/hosted/documents"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createDocumentRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateDocumentResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter id: (path)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: DocumentResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedUserDocumentsIdProcessPost(id: String, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> DocumentResponse {
        return try await hostedUserDocumentsIdProcessPostWithRequestBuilder(id: id, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/user/documents/{id}/process
     - Process the document and run any vendor verifications.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter id: (path)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<DocumentResponse> 
     */
    open class func hostedUserDocumentsIdProcessPostWithRequestBuilder(id: String, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<DocumentResponse> {
        var localVariablePath = "/hosted/user/documents/{id}/process"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DocumentResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**
     * enum for parameter side
     */
    public enum Side_hostedUserDocumentsIdUploadSidePost: String, CaseIterable {
        case front = "front"
        case back = "back"
        case selfie = "selfie"
    }

    /**

     - parameter id: (path)  
     - parameter side: (path)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedUserDocumentsIdUploadSidePost(id: String, side: Side_hostedUserDocumentsIdUploadSidePost, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedUserDocumentsIdUploadSidePostWithRequestBuilder(id: id, side: side, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/user/documents/{id}/upload/{side}
     - Upload an image for the given side to the provided document.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter id: (path)  
     - parameter side: (path)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedUserDocumentsIdUploadSidePostWithRequestBuilder(id: String, side: Side_hostedUserDocumentsIdUploadSidePost, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        var localVariablePath = "/hosted/user/documents/{id}/upload/{side}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let sidePreEscape = "\(side.rawValue)"
        let sidePostEscape = sidePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{side}", with: sidePostEscape, options: .literal, range: nil)
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter createDocumentRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: CreateDocumentResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedUserDocumentsPost(createDocumentRequest: CreateDocumentRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> CreateDocumentResponse {
        return try await hostedUserDocumentsPostWithRequestBuilder(createDocumentRequest: createDocumentRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/user/documents
     - Create a new document for the outstanding document request
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter createDocumentRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<CreateDocumentResponse> 
     */
    open class func hostedUserDocumentsPostWithRequestBuilder(createDocumentRequest: CreateDocumentRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<CreateDocumentResponse> {
        let localVariablePath = "/hosted/user/documents"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createDocumentRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateDocumentResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**
     * enum for parameter documentIdentifier
     */
    public enum DocumentIdentifier_hostedUserUploadDocumentIdentifierPost: String, CaseIterable {
        case idPeriodFirstName = "id.first_name"
        case idPeriodMiddleName = "id.middle_name"
        case idPeriodLastName = "id.last_name"
        case idPeriodDob = "id.dob"
        case idPeriodSsn4 = "id.ssn4"
        case idPeriodSsn9 = "id.ssn9"
        case idPeriodAddressLine1 = "id.address_line1"
        case idPeriodAddressLine2 = "id.address_line2"
        case idPeriodCity = "id.city"
        case idPeriodState = "id.state"
        case idPeriodZip = "id.zip"
        case idPeriodCountry = "id.country"
        case idPeriodEmail = "id.email"
        case idPeriodPhoneNumber = "id.phone_number"
        case idPeriodUsLegalStatus = "id.us_legal_status"
        case idPeriodVisaKind = "id.visa_kind"
        case idPeriodVisaExpirationDate = "id.visa_expiration_date"
        case idPeriodNationality = "id.nationality"
        case idPeriodCitizenships = "id.citizenships"
        case idPeriodDriversLicenseNumber = "id.drivers_license_number"
        case idPeriodDriversLicenseState = "id.drivers_license_state"
        case idPeriodItin = "id.itin"
        case idPeriodUsTaxId = "id.us_tax_id"
        case businessPeriodName = "business.name"
        case businessPeriodDba = "business.dba"
        case businessPeriodWebsite = "business.website"
        case businessPeriodPhoneNumber = "business.phone_number"
        case businessPeriodTin = "business.tin"
        case businessPeriodAddressLine1 = "business.address_line1"
        case businessPeriodAddressLine2 = "business.address_line2"
        case businessPeriodCity = "business.city"
        case businessPeriodState = "business.state"
        case businessPeriodZip = "business.zip"
        case businessPeriodCountry = "business.country"
        case businessPeriodBeneficialOwners = "business.beneficial_owners"
        case businessPeriodKycedBeneficialOwners = "business.kyced_beneficial_owners"
        case businessPeriodCorporationType = "business.corporation_type"
        case businessPeriodFormationState = "business.formation_state"
        case businessPeriodFormationDate = "business.formation_date"
        case customPeriodStar = "custom.*"
        case investorProfilePeriodEmploymentStatus = "investor_profile.employment_status"
        case investorProfilePeriodOccupation = "investor_profile.occupation"
        case investorProfilePeriodEmployer = "investor_profile.employer"
        case investorProfilePeriodAnnualIncome = "investor_profile.annual_income"
        case investorProfilePeriodNetWorth = "investor_profile.net_worth"
        case investorProfilePeriodInvestmentGoals = "investor_profile.investment_goals"
        case investorProfilePeriodRiskTolerance = "investor_profile.risk_tolerance"
        case investorProfilePeriodDeclarations = "investor_profile.declarations"
        case investorProfilePeriodBrokerageFirmEmployer = "investor_profile.brokerage_firm_employer"
        case investorProfilePeriodSeniorExecutiveSymbols = "investor_profile.senior_executive_symbols"
        case investorProfilePeriodFamilyMemberNames = "investor_profile.family_member_names"
        case investorProfilePeriodPoliticalOrganization = "investor_profile.political_organization"
        case investorProfilePeriodFundingSources = "investor_profile.funding_sources"
        case documentPeriodIdCardPeriodFrontPeriodImage = "document.id_card.front.image"
        case documentPeriodIdCardPeriodFrontPeriodMimeType = "document.id_card.front.mime_type"
        case documentPeriodIdCardPeriodBackPeriodImage = "document.id_card.back.image"
        case documentPeriodIdCardPeriodBackPeriodMimeType = "document.id_card.back.mime_type"
        case documentPeriodIdCardPeriodSelfiePeriodImage = "document.id_card.selfie.image"
        case documentPeriodIdCardPeriodSelfiePeriodMimeType = "document.id_card.selfie.mime_type"
        case documentPeriodIdCardPeriodFullName = "document.id_card.full_name"
        case documentPeriodIdCardPeriodDob = "document.id_card.dob"
        case documentPeriodIdCardPeriodGender = "document.id_card.gender"
        case documentPeriodIdCardPeriodFullAddress = "document.id_card.full_address"
        case documentPeriodIdCardPeriodDocumentNumber = "document.id_card.document_number"
        case documentPeriodIdCardPeriodExpiresAt = "document.id_card.expires_at"
        case documentPeriodIdCardPeriodIssuedAt = "document.id_card.issued_at"
        case documentPeriodIdCardPeriodIssuingState = "document.id_card.issuing_state"
        case documentPeriodIdCardPeriodIssuingCountry = "document.id_card.issuing_country"
        case documentPeriodIdCardPeriodRefNumber = "document.id_card.ref_number"
        case documentPeriodIdCardPeriodNationality = "document.id_card.nationality"
        case documentPeriodIdCardPeriodCurp = "document.id_card.curp"
        case documentPeriodIdCardPeriodClassifiedDocumentType = "document.id_card.classified_document_type"
        case documentPeriodIdCardPeriodCurpValidationResponse = "document.id_card.curp_validation_response"
        case documentPeriodDriversLicensePeriodFrontPeriodImage = "document.drivers_license.front.image"
        case documentPeriodDriversLicensePeriodFrontPeriodMimeType = "document.drivers_license.front.mime_type"
        case documentPeriodDriversLicensePeriodBackPeriodImage = "document.drivers_license.back.image"
        case documentPeriodDriversLicensePeriodBackPeriodMimeType = "document.drivers_license.back.mime_type"
        case documentPeriodDriversLicensePeriodSelfiePeriodImage = "document.drivers_license.selfie.image"
        case documentPeriodDriversLicensePeriodSelfiePeriodMimeType = "document.drivers_license.selfie.mime_type"
        case documentPeriodDriversLicensePeriodFullName = "document.drivers_license.full_name"
        case documentPeriodDriversLicensePeriodDob = "document.drivers_license.dob"
        case documentPeriodDriversLicensePeriodGender = "document.drivers_license.gender"
        case documentPeriodDriversLicensePeriodFullAddress = "document.drivers_license.full_address"
        case documentPeriodDriversLicensePeriodDocumentNumber = "document.drivers_license.document_number"
        case documentPeriodDriversLicensePeriodExpiresAt = "document.drivers_license.expires_at"
        case documentPeriodDriversLicensePeriodIssuedAt = "document.drivers_license.issued_at"
        case documentPeriodDriversLicensePeriodIssuingState = "document.drivers_license.issuing_state"
        case documentPeriodDriversLicensePeriodIssuingCountry = "document.drivers_license.issuing_country"
        case documentPeriodDriversLicensePeriodRefNumber = "document.drivers_license.ref_number"
        case documentPeriodDriversLicensePeriodNationality = "document.drivers_license.nationality"
        case documentPeriodDriversLicensePeriodCurp = "document.drivers_license.curp"
        case documentPeriodDriversLicensePeriodClassifiedDocumentType = "document.drivers_license.classified_document_type"
        case documentPeriodDriversLicensePeriodCurpValidationResponse = "document.drivers_license.curp_validation_response"
        case documentPeriodPassportPeriodFrontPeriodImage = "document.passport.front.image"
        case documentPeriodPassportPeriodFrontPeriodMimeType = "document.passport.front.mime_type"
        case documentPeriodPassportPeriodBackPeriodImage = "document.passport.back.image"
        case documentPeriodPassportPeriodBackPeriodMimeType = "document.passport.back.mime_type"
        case documentPeriodPassportPeriodSelfiePeriodImage = "document.passport.selfie.image"
        case documentPeriodPassportPeriodSelfiePeriodMimeType = "document.passport.selfie.mime_type"
        case documentPeriodPassportPeriodFullName = "document.passport.full_name"
        case documentPeriodPassportPeriodDob = "document.passport.dob"
        case documentPeriodPassportPeriodGender = "document.passport.gender"
        case documentPeriodPassportPeriodFullAddress = "document.passport.full_address"
        case documentPeriodPassportPeriodDocumentNumber = "document.passport.document_number"
        case documentPeriodPassportPeriodExpiresAt = "document.passport.expires_at"
        case documentPeriodPassportPeriodIssuedAt = "document.passport.issued_at"
        case documentPeriodPassportPeriodIssuingState = "document.passport.issuing_state"
        case documentPeriodPassportPeriodIssuingCountry = "document.passport.issuing_country"
        case documentPeriodPassportPeriodRefNumber = "document.passport.ref_number"
        case documentPeriodPassportPeriodNationality = "document.passport.nationality"
        case documentPeriodPassportPeriodCurp = "document.passport.curp"
        case documentPeriodPassportPeriodClassifiedDocumentType = "document.passport.classified_document_type"
        case documentPeriodPassportPeriodCurpValidationResponse = "document.passport.curp_validation_response"
        case documentPeriodPassportCardPeriodFrontPeriodImage = "document.passport_card.front.image"
        case documentPeriodPassportCardPeriodFrontPeriodMimeType = "document.passport_card.front.mime_type"
        case documentPeriodPassportCardPeriodBackPeriodImage = "document.passport_card.back.image"
        case documentPeriodPassportCardPeriodBackPeriodMimeType = "document.passport_card.back.mime_type"
        case documentPeriodPassportCardPeriodSelfiePeriodImage = "document.passport_card.selfie.image"
        case documentPeriodPassportCardPeriodSelfiePeriodMimeType = "document.passport_card.selfie.mime_type"
        case documentPeriodPassportCardPeriodFullName = "document.passport_card.full_name"
        case documentPeriodPassportCardPeriodDob = "document.passport_card.dob"
        case documentPeriodPassportCardPeriodGender = "document.passport_card.gender"
        case documentPeriodPassportCardPeriodFullAddress = "document.passport_card.full_address"
        case documentPeriodPassportCardPeriodDocumentNumber = "document.passport_card.document_number"
        case documentPeriodPassportCardPeriodExpiresAt = "document.passport_card.expires_at"
        case documentPeriodPassportCardPeriodIssuedAt = "document.passport_card.issued_at"
        case documentPeriodPassportCardPeriodIssuingState = "document.passport_card.issuing_state"
        case documentPeriodPassportCardPeriodIssuingCountry = "document.passport_card.issuing_country"
        case documentPeriodPassportCardPeriodRefNumber = "document.passport_card.ref_number"
        case documentPeriodPassportCardPeriodNationality = "document.passport_card.nationality"
        case documentPeriodPassportCardPeriodCurp = "document.passport_card.curp"
        case documentPeriodPassportCardPeriodClassifiedDocumentType = "document.passport_card.classified_document_type"
        case documentPeriodPassportCardPeriodCurpValidationResponse = "document.passport_card.curp_validation_response"
        case documentPeriodPermitPeriodFrontPeriodImage = "document.permit.front.image"
        case documentPeriodPermitPeriodFrontPeriodMimeType = "document.permit.front.mime_type"
        case documentPeriodPermitPeriodBackPeriodImage = "document.permit.back.image"
        case documentPeriodPermitPeriodBackPeriodMimeType = "document.permit.back.mime_type"
        case documentPeriodPermitPeriodSelfiePeriodImage = "document.permit.selfie.image"
        case documentPeriodPermitPeriodSelfiePeriodMimeType = "document.permit.selfie.mime_type"
        case documentPeriodPermitPeriodFullName = "document.permit.full_name"
        case documentPeriodPermitPeriodDob = "document.permit.dob"
        case documentPeriodPermitPeriodGender = "document.permit.gender"
        case documentPeriodPermitPeriodFullAddress = "document.permit.full_address"
        case documentPeriodPermitPeriodDocumentNumber = "document.permit.document_number"
        case documentPeriodPermitPeriodExpiresAt = "document.permit.expires_at"
        case documentPeriodPermitPeriodIssuedAt = "document.permit.issued_at"
        case documentPeriodPermitPeriodIssuingState = "document.permit.issuing_state"
        case documentPeriodPermitPeriodIssuingCountry = "document.permit.issuing_country"
        case documentPeriodPermitPeriodRefNumber = "document.permit.ref_number"
        case documentPeriodPermitPeriodNationality = "document.permit.nationality"
        case documentPeriodPermitPeriodCurp = "document.permit.curp"
        case documentPeriodPermitPeriodClassifiedDocumentType = "document.permit.classified_document_type"
        case documentPeriodPermitPeriodCurpValidationResponse = "document.permit.curp_validation_response"
        case documentPeriodVisaPeriodFrontPeriodImage = "document.visa.front.image"
        case documentPeriodVisaPeriodFrontPeriodMimeType = "document.visa.front.mime_type"
        case documentPeriodVisaPeriodBackPeriodImage = "document.visa.back.image"
        case documentPeriodVisaPeriodBackPeriodMimeType = "document.visa.back.mime_type"
        case documentPeriodVisaPeriodSelfiePeriodImage = "document.visa.selfie.image"
        case documentPeriodVisaPeriodSelfiePeriodMimeType = "document.visa.selfie.mime_type"
        case documentPeriodVisaPeriodFullName = "document.visa.full_name"
        case documentPeriodVisaPeriodDob = "document.visa.dob"
        case documentPeriodVisaPeriodGender = "document.visa.gender"
        case documentPeriodVisaPeriodFullAddress = "document.visa.full_address"
        case documentPeriodVisaPeriodDocumentNumber = "document.visa.document_number"
        case documentPeriodVisaPeriodExpiresAt = "document.visa.expires_at"
        case documentPeriodVisaPeriodIssuedAt = "document.visa.issued_at"
        case documentPeriodVisaPeriodIssuingState = "document.visa.issuing_state"
        case documentPeriodVisaPeriodIssuingCountry = "document.visa.issuing_country"
        case documentPeriodVisaPeriodRefNumber = "document.visa.ref_number"
        case documentPeriodVisaPeriodNationality = "document.visa.nationality"
        case documentPeriodVisaPeriodCurp = "document.visa.curp"
        case documentPeriodVisaPeriodClassifiedDocumentType = "document.visa.classified_document_type"
        case documentPeriodVisaPeriodCurpValidationResponse = "document.visa.curp_validation_response"
        case documentPeriodResidenceDocumentPeriodFrontPeriodImage = "document.residence_document.front.image"
        case documentPeriodResidenceDocumentPeriodFrontPeriodMimeType = "document.residence_document.front.mime_type"
        case documentPeriodResidenceDocumentPeriodBackPeriodImage = "document.residence_document.back.image"
        case documentPeriodResidenceDocumentPeriodBackPeriodMimeType = "document.residence_document.back.mime_type"
        case documentPeriodResidenceDocumentPeriodSelfiePeriodImage = "document.residence_document.selfie.image"
        case documentPeriodResidenceDocumentPeriodSelfiePeriodMimeType = "document.residence_document.selfie.mime_type"
        case documentPeriodResidenceDocumentPeriodFullName = "document.residence_document.full_name"
        case documentPeriodResidenceDocumentPeriodDob = "document.residence_document.dob"
        case documentPeriodResidenceDocumentPeriodGender = "document.residence_document.gender"
        case documentPeriodResidenceDocumentPeriodFullAddress = "document.residence_document.full_address"
        case documentPeriodResidenceDocumentPeriodDocumentNumber = "document.residence_document.document_number"
        case documentPeriodResidenceDocumentPeriodExpiresAt = "document.residence_document.expires_at"
        case documentPeriodResidenceDocumentPeriodIssuedAt = "document.residence_document.issued_at"
        case documentPeriodResidenceDocumentPeriodIssuingState = "document.residence_document.issuing_state"
        case documentPeriodResidenceDocumentPeriodIssuingCountry = "document.residence_document.issuing_country"
        case documentPeriodResidenceDocumentPeriodRefNumber = "document.residence_document.ref_number"
        case documentPeriodResidenceDocumentPeriodNationality = "document.residence_document.nationality"
        case documentPeriodResidenceDocumentPeriodCurp = "document.residence_document.curp"
        case documentPeriodResidenceDocumentPeriodClassifiedDocumentType = "document.residence_document.classified_document_type"
        case documentPeriodResidenceDocumentPeriodCurpValidationResponse = "document.residence_document.curp_validation_response"
        case documentPeriodVoterIdentificationPeriodFrontPeriodImage = "document.voter_identification.front.image"
        case documentPeriodVoterIdentificationPeriodFrontPeriodMimeType = "document.voter_identification.front.mime_type"
        case documentPeriodVoterIdentificationPeriodBackPeriodImage = "document.voter_identification.back.image"
        case documentPeriodVoterIdentificationPeriodBackPeriodMimeType = "document.voter_identification.back.mime_type"
        case documentPeriodVoterIdentificationPeriodSelfiePeriodImage = "document.voter_identification.selfie.image"
        case documentPeriodVoterIdentificationPeriodSelfiePeriodMimeType = "document.voter_identification.selfie.mime_type"
        case documentPeriodVoterIdentificationPeriodFullName = "document.voter_identification.full_name"
        case documentPeriodVoterIdentificationPeriodDob = "document.voter_identification.dob"
        case documentPeriodVoterIdentificationPeriodGender = "document.voter_identification.gender"
        case documentPeriodVoterIdentificationPeriodFullAddress = "document.voter_identification.full_address"
        case documentPeriodVoterIdentificationPeriodDocumentNumber = "document.voter_identification.document_number"
        case documentPeriodVoterIdentificationPeriodExpiresAt = "document.voter_identification.expires_at"
        case documentPeriodVoterIdentificationPeriodIssuedAt = "document.voter_identification.issued_at"
        case documentPeriodVoterIdentificationPeriodIssuingState = "document.voter_identification.issuing_state"
        case documentPeriodVoterIdentificationPeriodIssuingCountry = "document.voter_identification.issuing_country"
        case documentPeriodVoterIdentificationPeriodRefNumber = "document.voter_identification.ref_number"
        case documentPeriodVoterIdentificationPeriodNationality = "document.voter_identification.nationality"
        case documentPeriodVoterIdentificationPeriodCurp = "document.voter_identification.curp"
        case documentPeriodVoterIdentificationPeriodClassifiedDocumentType = "document.voter_identification.classified_document_type"
        case documentPeriodVoterIdentificationPeriodCurpValidationResponse = "document.voter_identification.curp_validation_response"
        case documentPeriodFinraComplianceLetter = "document.finra_compliance_letter"
        case documentPeriodProofOfAddressPeriodImage = "document.proof_of_address.image"
        case documentPeriodSsnCardPeriodImage = "document.ssn_card.image"
        case documentPeriodCustomPeriodStar = "document.custom.*"
        case cardPeriodStarPeriodNumber = "card.*.number"
        case cardPeriodStarPeriodExpiration = "card.*.expiration"
        case cardPeriodStarPeriodCvc = "card.*.cvc"
        case cardPeriodStarPeriodName = "card.*.name"
        case cardPeriodStarPeriodBillingAddressPeriodZip = "card.*.billing_address.zip"
        case cardPeriodStarPeriodBillingAddressPeriodCountry = "card.*.billing_address.country"
        case cardPeriodStarPeriodExpirationMonth = "card.*.expiration_month"
        case cardPeriodStarPeriodExpirationYear = "card.*.expiration_year"
        case cardPeriodStarPeriodNumberLast4 = "card.*.number_last4"
        case cardPeriodStarPeriodIssuer = "card.*.issuer"
        case bankPeriodStarPeriodName = "bank.*.name"
        case bankPeriodStarPeriodAchRoutingNumber = "bank.*.ach_routing_number"
        case bankPeriodStarPeriodAchAccountNumber = "bank.*.ach_account_number"
        case bankPeriodStarPeriodAchAccountId = "bank.*.ach_account_id"
        case bankPeriodStarPeriodAccountType = "bank.*.account_type"
    }

    /**

     - parameter documentIdentifier: (path)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedUserUploadDocumentIdentifierPost(documentIdentifier: DocumentIdentifier_hostedUserUploadDocumentIdentifierPost, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedUserUploadDocumentIdentifierPostWithRequestBuilder(documentIdentifier: documentIdentifier, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/user/upload/{document_identifier}
     - POSTs a document to the vault
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter documentIdentifier: (path)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedUserUploadDocumentIdentifierPostWithRequestBuilder(documentIdentifier: DocumentIdentifier_hostedUserUploadDocumentIdentifierPost, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        var localVariablePath = "/hosted/user/upload/{document_identifier}"
        let documentIdentifierPreEscape = "\(documentIdentifier.rawValue)"
        let documentIdentifierPostEscape = documentIdentifierPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{document_identifier}", with: documentIdentifierPostEscape, options: .literal, range: nil)
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }
}
