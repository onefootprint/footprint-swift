//
// IdentifyAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class IdentifyAPI {

    /**

     - parameter body: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: KbaResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedIdentifyKbaPost(body: VaultData, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> KbaResponse {
        return try await hostedIdentifyKbaPostWithRequestBuilder(body: body, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/identify/kba
     - Respond to a KBA challenge to prove knowledge of existing data in the vault.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter body: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<KbaResponse> 
     */
    open class func hostedIdentifyKbaPostWithRequestBuilder(body: VaultData, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<KbaResponse> {
        let localVariablePath = "/hosted/identify/kba"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<KbaResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter liteIdentifyRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: LiteIdentifyResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedIdentifyLitePost(liteIdentifyRequest: LiteIdentifyRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> LiteIdentifyResponse {
        return try await hostedIdentifyLitePostWithRequestBuilder(liteIdentifyRequest: liteIdentifyRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/identify/lite
     - Tries to identify an existing user by either phone number or email and returns whether a user exists. This is used exclusively in our SDK to check proactively if bootstrapped data identifies an existing user. This is very similar to the normal identify API, but it has a much simpler API will hopefully be more stable than the normal identify API since changes will break old SDK versions.
     - API Key:
       - type: apiKey X-Onboarding-Config-Key (HEADER)
       - name: OnboardingConfigPublishableKey
     - API Key:
       - type: apiKey X-Onboarding-Session-Token (HEADER)
       - name: OnboardingConfigToken
     - API Key:
       - type: apiKey X-Kyb-Bo-Token (HEADER)
       - name: BusinessOwnerToken
     - parameter liteIdentifyRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<LiteIdentifyResponse> 
     */
    open class func hostedIdentifyLitePostWithRequestBuilder(liteIdentifyRequest: LiteIdentifyRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<LiteIdentifyResponse> {
        let localVariablePath = "/hosted/identify/lite"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: liteIdentifyRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LiteIdentifyResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter xOnboardingConfigKey: (header)  
     - parameter identifyRequest: (body)  
     - parameter xSandboxId: (header) When provided, creates a sandbox user with the provided sandbox ID. Sandbox IDs allow you to create multiple users with the same contact info. In order to log in using an existing sandbox user, you can provide its Sandbox ID in the Footprint flow.              (optional)
     - parameter xFpAuthorization: (header)  (optional)
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: IdentifyResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func identify(xOnboardingConfigKey: String, identifyRequest: IdentifyRequest, xSandboxId: String? = nil, xFpAuthorization: String? = nil, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> IdentifyResponse {
        return try await identifyWithRequestBuilder(xOnboardingConfigKey: xOnboardingConfigKey, identifyRequest: identifyRequest, xSandboxId: xSandboxId, xFpAuthorization: xFpAuthorization, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/identify
     - Tries to identify an existing user by either phone number or email. If the user is found, returns available challenge kinds.
     - API Key:
       - type: apiKey X-Onboarding-Config-Key (HEADER)
       - name: OnboardingConfigPublishableKey
     - API Key:
       - type: apiKey X-Onboarding-Session-Token (HEADER)
       - name: OnboardingConfigToken
     - API Key:
       - type: apiKey X-Kyb-Bo-Token (HEADER)
       - name: BusinessOwnerToken
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter xOnboardingConfigKey: (header)  
     - parameter identifyRequest: (body)  
     - parameter xSandboxId: (header) When provided, creates a sandbox user with the provided sandbox ID. Sandbox IDs allow you to create multiple users with the same contact info. In order to log in using an existing sandbox user, you can provide its Sandbox ID in the Footprint flow.              (optional)
     - parameter xFpAuthorization: (header)  (optional)
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<IdentifyResponse> 
     */
    open class func identifyWithRequestBuilder(xOnboardingConfigKey: String, identifyRequest: IdentifyRequest, xSandboxId: String? = nil, xFpAuthorization: String? = nil, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<IdentifyResponse> {
        let localVariablePath = "/hosted/identify"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: identifyRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-Sandbox-Id": xSandboxId?.encodeToJSON(codableHelper: openAPIClient.codableHelper),
            "X-Onboarding-Config-Key": xOnboardingConfigKey.encodeToJSON(codableHelper: openAPIClient.codableHelper),
            "X-Fp-Authorization": xFpAuthorization?.encodeToJSON(codableHelper: openAPIClient.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IdentifyResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**
     Login Challenge
     
     - parameter xFpAuthorization: (header)  
     - parameter loginChallengeRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: LoginChallengeResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func loginChallenge(xFpAuthorization: String, loginChallengeRequest: LoginChallengeRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> LoginChallengeResponse {
        return try await loginChallengeWithRequestBuilder(xFpAuthorization: xFpAuthorization, loginChallengeRequest: loginChallengeRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     Login Challenge
     - POST /hosted/identify/login_challenge
     - Sends a challenge to the phone number and returns an HTTP 200. When the challenge is completed through the identify/verify endpoint, the client can get or create the user with this phone number.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter xFpAuthorization: (header)  
     - parameter loginChallengeRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<LoginChallengeResponse> 
     */
    open class func loginChallengeWithRequestBuilder(xFpAuthorization: String, loginChallengeRequest: LoginChallengeRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<LoginChallengeResponse> {
        let localVariablePath = "/hosted/identify/login_challenge"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: loginChallengeRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-Fp-Authorization": xFpAuthorization.encodeToJSON(codableHelper: openAPIClient.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LoginChallengeResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**
     Signup Challenge
     
     - parameter xOnboardingConfigKey: (header)  
     - parameter signupChallengeRequest: (body)  
     - parameter xSandboxId: (header) When provided, creates a sandbox user with the provided sandbox ID. Sandbox IDs allow you to create multiple users with the same contact info. In order to log in using an existing sandbox user, you can provide its Sandbox ID in the Footprint flow.              (optional)
     - parameter xFpIsComponentsSdk: (header) When a non-empty value is provided, indicates that the request is originating from the components SDK (optional)
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: SignupChallengeResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func signupChallenge(xOnboardingConfigKey: String, signupChallengeRequest: SignupChallengeRequest, xSandboxId: String? = nil, xFpIsComponentsSdk: Bool? = nil, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> SignupChallengeResponse {
        return try await signupChallengeWithRequestBuilder(xOnboardingConfigKey: xOnboardingConfigKey, signupChallengeRequest: signupChallengeRequest, xSandboxId: xSandboxId, xFpIsComponentsSdk: xFpIsComponentsSdk, openAPIClient: openAPIClient).execute().body
    }

    /**
     Signup Challenge
     - POST /hosted/identify/signup_challenge
     - Sends a challenge to a phone number or email and returns an HTTP 200. When the challenge is completed through the identify/verify endpoint, the client can begin onboarding the user.
     - API Key:
       - type: apiKey X-Onboarding-Config-Key (HEADER)
       - name: OnboardingConfigPublishableKey
     - API Key:
       - type: apiKey X-Onboarding-Session-Token (HEADER)
       - name: OnboardingConfigToken
     - API Key:
       - type: apiKey X-Kyb-Bo-Token (HEADER)
       - name: BusinessOwnerToken
     - parameter xOnboardingConfigKey: (header)  
     - parameter signupChallengeRequest: (body)  
     - parameter xSandboxId: (header) When provided, creates a sandbox user with the provided sandbox ID. Sandbox IDs allow you to create multiple users with the same contact info. In order to log in using an existing sandbox user, you can provide its Sandbox ID in the Footprint flow.              (optional)
     - parameter xFpIsComponentsSdk: (header) When a non-empty value is provided, indicates that the request is originating from the components SDK (optional)
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<SignupChallengeResponse> 
     */
    open class func signupChallengeWithRequestBuilder(xOnboardingConfigKey: String, signupChallengeRequest: SignupChallengeRequest, xSandboxId: String? = nil, xFpIsComponentsSdk: Bool? = nil, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<SignupChallengeResponse> {
        let localVariablePath = "/hosted/identify/signup_challenge"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: signupChallengeRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-Sandbox-Id": xSandboxId?.encodeToJSON(codableHelper: openAPIClient.codableHelper),
            "X-Fp-Is-Components-Sdk": xFpIsComponentsSdk?.encodeToJSON(codableHelper: openAPIClient.codableHelper),
            "X-Onboarding-Config-Key": xOnboardingConfigKey.encodeToJSON(codableHelper: openAPIClient.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SignupChallengeResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**
     Verify
     
     - parameter xFpAuthorization: (header)  
     - parameter xOnboardingConfigKey: (header)  
     - parameter identifyVerifyRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: IdentifyVerifyResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func verify(xFpAuthorization: String, xOnboardingConfigKey: String, identifyVerifyRequest: IdentifyVerifyRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> IdentifyVerifyResponse {
        return try await verifyWithRequestBuilder(xFpAuthorization: xFpAuthorization, xOnboardingConfigKey: xOnboardingConfigKey, identifyVerifyRequest: identifyVerifyRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     Verify
     - POST /hosted/identify/verify
     - Verifies the response to either an SMS or biometric challenge. When the challenge response is verified, we will return an auth token for the user. If no user exists (which may only happen after a phone challenge), we will create a new user with the provided phone number
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter xFpAuthorization: (header)  
     - parameter xOnboardingConfigKey: (header)  
     - parameter identifyVerifyRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<IdentifyVerifyResponse> 
     */
    open class func verifyWithRequestBuilder(xFpAuthorization: String, xOnboardingConfigKey: String, identifyVerifyRequest: IdentifyVerifyRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<IdentifyVerifyResponse> {
        let localVariablePath = "/hosted/identify/verify"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: identifyVerifyRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-Fp-Authorization": xFpAuthorization.encodeToJSON(codableHelper: openAPIClient.codableHelper),
            "X-Onboarding-Config-Key": xOnboardingConfigKey.encodeToJSON(codableHelper: openAPIClient.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IdentifyVerifyResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }
}
