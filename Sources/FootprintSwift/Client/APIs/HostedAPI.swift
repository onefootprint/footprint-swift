//
// HostedAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class HostedAPI {

    /**

     - parameter xFpAuthorization: (header)  
     - parameter userDecryptRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: VaultData
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func decryptUserVault_1(xFpAuthorization: String, userDecryptRequest: UserDecryptRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> VaultData {
        return try await decryptUserVault_1WithRequestBuilder(xFpAuthorization: xFpAuthorization, userDecryptRequest: userDecryptRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/user/vault/decrypt
     - Decrypts the specified list of fields from the provided vault.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter xFpAuthorization: (header)  
     - parameter userDecryptRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<VaultData> 
     */
    open class func decryptUserVault_1WithRequestBuilder(xFpAuthorization: String, userDecryptRequest: UserDecryptRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<VaultData> {
        let localVariablePath = "/hosted/user/vault/decrypt"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userDecryptRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-Fp-Authorization": xFpAuthorization.encodeToJSON(codableHelper: openAPIClient.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VaultData>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**
     Onboarding Config
     
     - parameter xOnboardingConfigKey: (header)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: PublicOnboardingConfiguration
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getOnboardingConfig_1(xOnboardingConfigKey: String, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> PublicOnboardingConfiguration {
        return try await getOnboardingConfig_1WithRequestBuilder(xOnboardingConfigKey: xOnboardingConfigKey, openAPIClient: openAPIClient).execute().body
    }

    /**
     Onboarding Config
     - GET /hosted/onboarding/config
     - Get the details of an onboarding configuration.
     - API Key:
       - type: apiKey X-Onboarding-Config-Key (HEADER)
       - name: OnboardingConfigPublishableKey
     - API Key:
       - type: apiKey X-Onboarding-Session-Token (HEADER)
       - name: OnboardingConfigToken
     - API Key:
       - type: apiKey X-Kyb-Bo-Token (HEADER)
       - name: BusinessOwnerToken
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter xOnboardingConfigKey: (header)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<PublicOnboardingConfiguration> 
     */
    open class func getOnboardingConfig_1WithRequestBuilder(xOnboardingConfigKey: String, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<PublicOnboardingConfiguration> {
        let localVariablePath = "/hosted/onboarding/config"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Onboarding-Config-Key": xOnboardingConfigKey.encodeToJSON(codableHelper: openAPIClient.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PublicOnboardingConfiguration>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: HostedBusiness
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedBusinessGet_0(openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> HostedBusiness {
        return try await hostedBusinessGet_0WithRequestBuilder(openAPIClient: openAPIClient).execute().body
    }

    /**
     - GET /hosted/business
     - Get information about the business for which we started a KYC of a beneficial owner
     - API Key:
       - type: apiKey X-Kyb-Bo-Token (HEADER)
       - name: BusinessOwnerToken
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<HostedBusiness> 
     */
    open class func hostedBusinessGet_0WithRequestBuilder(openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<HostedBusiness> {
        let localVariablePath = "/hosted/business"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<HostedBusiness>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter userDecryptRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: BusinessDecryptResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedBusinessVaultDecryptPost_1(userDecryptRequest: UserDecryptRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> BusinessDecryptResponse {
        return try await hostedBusinessVaultDecryptPost_1WithRequestBuilder(userDecryptRequest: userDecryptRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/business/vault/decrypt
     - Decrypts the specified list of fields from the provided vault.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter userDecryptRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<BusinessDecryptResponse> 
     */
    open class func hostedBusinessVaultDecryptPost_1WithRequestBuilder(userDecryptRequest: UserDecryptRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<BusinessDecryptResponse> {
        let localVariablePath = "/hosted/business/vault/decrypt"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userDecryptRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BusinessDecryptResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter rawBusinessDataRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedBusinessVaultPatch_0(rawBusinessDataRequest: RawBusinessDataRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedBusinessVaultPatch_0WithRequestBuilder(rawBusinessDataRequest: rawBusinessDataRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - PATCH /hosted/business/vault
     - Updates data in a business vault. Can be used to update `business.` data
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter rawBusinessDataRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedBusinessVaultPatch_0WithRequestBuilder(rawBusinessDataRequest: RawBusinessDataRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/hosted/business/vault"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rawBusinessDataRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter rawBusinessDataRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedBusinessVaultValidatePost_0(rawBusinessDataRequest: RawBusinessDataRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedBusinessVaultValidatePost_0WithRequestBuilder(rawBusinessDataRequest: rawBusinessDataRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/business/vault/validate
     - Checks if provided vault data is valid before adding it to the business vault
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter rawBusinessDataRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedBusinessVaultValidatePost_0WithRequestBuilder(rawBusinessDataRequest: RawBusinessDataRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/hosted/business/vault/validate"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rawBusinessDataRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: CheckSessionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedCheckSessionGet(openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> CheckSessionResponse {
        return try await hostedCheckSessionGetWithRequestBuilder(openAPIClient: openAPIClient).execute().body
    }

    /**
     - GET /hosted/check_session
     - Checks a hosted session token for expiration/validity
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: SessionToken
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<CheckSessionResponse> 
     */
    open class func hostedCheckSessionGetWithRequestBuilder(openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<CheckSessionResponse> {
        let localVariablePath = "/hosted/check_session"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CheckSessionResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter id: (path)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: DocumentResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedDocumentsIdProcessPost_0(id: String, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> DocumentResponse {
        return try await hostedDocumentsIdProcessPost_0WithRequestBuilder(id: id, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/documents/{id}/process
     - Process the document and run any vendor verifications.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter id: (path)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<DocumentResponse> 
     */
    open class func hostedDocumentsIdProcessPost_0WithRequestBuilder(id: String, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<DocumentResponse> {
        var localVariablePath = "/hosted/documents/{id}/process"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DocumentResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**
     * enum for parameter side
     */
    public enum Side_hostedDocumentsIdUploadSidePost_0: String, CaseIterable {
        case front = "front"
        case back = "back"
        case selfie = "selfie"
    }

    /**

     - parameter id: (path)  
     - parameter side: (path)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedDocumentsIdUploadSidePost_0(id: String, side: Side_hostedDocumentsIdUploadSidePost_0, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedDocumentsIdUploadSidePost_0WithRequestBuilder(id: id, side: side, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/documents/{id}/upload/{side}
     - Upload an image for the given side to the provided document.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter id: (path)  
     - parameter side: (path)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedDocumentsIdUploadSidePost_0WithRequestBuilder(id: String, side: Side_hostedDocumentsIdUploadSidePost_0, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        var localVariablePath = "/hosted/documents/{id}/upload/{side}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let sidePreEscape = "\(side.rawValue)"
        let sidePostEscape = sidePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{side}", with: sidePostEscape, options: .literal, range: nil)
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter createDocumentRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: CreateDocumentResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedDocumentsPost_0(createDocumentRequest: CreateDocumentRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> CreateDocumentResponse {
        return try await hostedDocumentsPost_0WithRequestBuilder(createDocumentRequest: createDocumentRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/documents
     - Create a new document for the outstanding document request
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter createDocumentRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<CreateDocumentResponse> 
     */
    open class func hostedDocumentsPost_0WithRequestBuilder(createDocumentRequest: CreateDocumentRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<CreateDocumentResponse> {
        let localVariablePath = "/hosted/documents"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createDocumentRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateDocumentResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter body: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: KbaResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedIdentifyKbaPost_0(body: VaultData, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> KbaResponse {
        return try await hostedIdentifyKbaPost_0WithRequestBuilder(body: body, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/identify/kba
     - Respond to a KBA challenge to prove knowledge of existing data in the vault.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter body: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<KbaResponse> 
     */
    open class func hostedIdentifyKbaPost_0WithRequestBuilder(body: VaultData, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<KbaResponse> {
        let localVariablePath = "/hosted/identify/kba"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<KbaResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter liteIdentifyRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: LiteIdentifyResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedIdentifyLitePost_0(liteIdentifyRequest: LiteIdentifyRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> LiteIdentifyResponse {
        return try await hostedIdentifyLitePost_0WithRequestBuilder(liteIdentifyRequest: liteIdentifyRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/identify/lite
     - Tries to identify an existing user by either phone number or email and returns whether a user exists. This is used exclusively in our SDK to check proactively if bootstrapped data identifies an existing user. This is very similar to the normal identify API, but it has a much simpler API will hopefully be more stable than the normal identify API since changes will break old SDK versions.
     - API Key:
       - type: apiKey X-Onboarding-Config-Key (HEADER)
       - name: OnboardingConfigPublishableKey
     - API Key:
       - type: apiKey X-Onboarding-Session-Token (HEADER)
       - name: OnboardingConfigToken
     - API Key:
       - type: apiKey X-Kyb-Bo-Token (HEADER)
       - name: BusinessOwnerToken
     - parameter liteIdentifyRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<LiteIdentifyResponse> 
     */
    open class func hostedIdentifyLitePost_0WithRequestBuilder(liteIdentifyRequest: LiteIdentifyRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<LiteIdentifyResponse> {
        let localVariablePath = "/hosted/identify/lite"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: liteIdentifyRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LiteIdentifyResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedOnboardingAuthorizePost_0(openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedOnboardingAuthorizePost_0WithRequestBuilder(openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/onboarding/authorize
     - Mark the onboarding as authorized and initiate IDV checks
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedOnboardingAuthorizePost_0WithRequestBuilder(openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/hosted/onboarding/authorize"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter d2pGenerateRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: D2pGenerateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedOnboardingD2pGenerate_0(d2pGenerateRequest: D2pGenerateRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> D2pGenerateResponse {
        return try await hostedOnboardingD2pGenerate_0WithRequestBuilder(d2pGenerateRequest: d2pGenerateRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/onboarding/d2p/generate
     - Generates a new d2p session token for the currently authenticated user. The d2p session token has a limited scope, and also includes some status metadata for syncing state across the phone and desktop.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter d2pGenerateRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<D2pGenerateResponse> 
     */
    open class func hostedOnboardingD2pGenerate_0WithRequestBuilder(d2pGenerateRequest: D2pGenerateRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<D2pGenerateResponse> {
        let localVariablePath = "/hosted/onboarding/d2p/generate"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: d2pGenerateRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<D2pGenerateResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter d2pSmsRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: D2pSmsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedOnboardingD2pSms_0(d2pSmsRequest: D2pSmsRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> D2pSmsResponse {
        return try await hostedOnboardingD2pSms_0WithRequestBuilder(d2pSmsRequest: d2pSmsRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/onboarding/d2p/sms
     - Send an SMS with a link to the phone onboarding page.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter d2pSmsRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<D2pSmsResponse> 
     */
    open class func hostedOnboardingD2pSms_0WithRequestBuilder(d2pSmsRequest: D2pSmsRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<D2pSmsResponse> {
        let localVariablePath = "/hosted/onboarding/d2p/sms"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: d2pSmsRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<D2pSmsResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter d2pUpdateStatusRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedOnboardingD2pStatusPost_0(d2pUpdateStatusRequest: D2pUpdateStatusRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedOnboardingD2pStatusPost_0WithRequestBuilder(d2pUpdateStatusRequest: d2pUpdateStatusRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/onboarding/d2p/status
     - Update the status of the provided d2p session. Only allows updating to certain statuses.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter d2pUpdateStatusRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedOnboardingD2pStatusPost_0WithRequestBuilder(d2pUpdateStatusRequest: D2pUpdateStatusRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/hosted/onboarding/d2p/status"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: d2pUpdateStatusRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: D2pStatusResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedOnboardingD2pStatus_0(openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> D2pStatusResponse {
        return try await hostedOnboardingD2pStatus_0WithRequestBuilder(openAPIClient: openAPIClient).execute().body
    }

    /**
     - GET /hosted/onboarding/d2p/status
     - Gets the status of the provided d2p session. Requires the d2p session token as the auth header.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<D2pStatusResponse> 
     */
    open class func hostedOnboardingD2pStatus_0WithRequestBuilder(openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<D2pStatusResponse> {
        let localVariablePath = "/hosted/onboarding/d2p/status"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<D2pStatusResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter fingerprintVisitRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedOnboardingFpPost_0(fingerprintVisitRequest: FingerprintVisitRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedOnboardingFpPost_0WithRequestBuilder(fingerprintVisitRequest: fingerprintVisitRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/onboarding/fp
     - Records a fingerprint visitorID for the Fingerprint SDK in the frontend
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter fingerprintVisitRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedOnboardingFpPost_0WithRequestBuilder(fingerprintVisitRequest: FingerprintVisitRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/hosted/onboarding/fp"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: fingerprintVisitRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: NeuroIdentityIdResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedOnboardingNidGet_0(openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> NeuroIdentityIdResponse {
        return try await hostedOnboardingNidGet_0WithRequestBuilder(openAPIClient: openAPIClient).execute().body
    }

    /**
     - GET /hosted/onboarding/nid
     - Retrieve identifier used for NeuroId
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<NeuroIdentityIdResponse> 
     */
    open class func hostedOnboardingNidGet_0WithRequestBuilder(openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<NeuroIdentityIdResponse> {
        let localVariablePath = "/hosted/onboarding/nid"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NeuroIdentityIdResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedOnboardingPrivacyPassGet_0(openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) {
        return try await hostedOnboardingPrivacyPassGet_0WithRequestBuilder(openAPIClient: openAPIClient).execute().body
    }

    /**
     - GET /hosted/onboarding/privacy_pass
     - initiates privacy pass protocol.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func hostedOnboardingPrivacyPassGet_0WithRequestBuilder(openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/hosted/onboarding/privacy_pass"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = openAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter socureDeviceSessionIdRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedOnboardingSdsPost_0(socureDeviceSessionIdRequest: SocureDeviceSessionIdRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedOnboardingSdsPost_0WithRequestBuilder(socureDeviceSessionIdRequest: socureDeviceSessionIdRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/onboarding/sds
     - Records a deviceSessionId from the Socure Device SDK in the frontend
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter socureDeviceSessionIdRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedOnboardingSdsPost_0WithRequestBuilder(socureDeviceSessionIdRequest: SocureDeviceSessionIdRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/hosted/onboarding/sds"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: socureDeviceSessionIdRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: OnboardingSessionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedOnboardingSessionGet_0(openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> OnboardingSessionResponse {
        return try await hostedOnboardingSessionGet_0WithRequestBuilder(openAPIClient: openAPIClient).execute().body
    }

    /**
     - GET /hosted/onboarding/session
     - Fetch information from an existing onboarding session token.
     - API Key:
       - type: apiKey X-Fp-Ob-Token (HEADER)
       - name: Onboardingtoken
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<OnboardingSessionResponse> 
     */
    open class func hostedOnboardingSessionGet_0WithRequestBuilder(openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<OnboardingSessionResponse> {
        let localVariablePath = "/hosted/onboarding/session"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OnboardingSessionResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter skipPasskeyRegisterRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedOnboardingSkipPasskeyRegisterPost_0(skipPasskeyRegisterRequest: SkipPasskeyRegisterRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedOnboardingSkipPasskeyRegisterPost_0WithRequestBuilder(skipPasskeyRegisterRequest: skipPasskeyRegisterRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/onboarding/skip_passkey_register
     - Tells us that a passkey registration was skipped
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter skipPasskeyRegisterRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedOnboardingSkipPasskeyRegisterPost_0WithRequestBuilder(skipPasskeyRegisterRequest: SkipPasskeyRegisterRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/hosted/onboarding/skip_passkey_register"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: skipPasskeyRegisterRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter stytchTelemetryRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedOnboardingTelPost_0(stytchTelemetryRequest: StytchTelemetryRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedOnboardingTelPost_0WithRequestBuilder(stytchTelemetryRequest: stytchTelemetryRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/onboarding/tel
     - Performs a lookup with Stytch on the passed up telemetry_id and records the response + risk signals
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter stytchTelemetryRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedOnboardingTelPost_0WithRequestBuilder(stytchTelemetryRequest: StytchTelemetryRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/hosted/onboarding/tel"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: stytchTelemetryRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter createOnboardingTimelineRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedOnboardingTimelinePost_0(createOnboardingTimelineRequest: CreateOnboardingTimelineRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedOnboardingTimelinePost_0WithRequestBuilder(createOnboardingTimelineRequest: createOnboardingTimelineRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/onboarding/timeline
     - Log a timeline event for this user using a frontend-provided page identifier
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter createOnboardingTimelineRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedOnboardingTimelinePost_0WithRequestBuilder(createOnboardingTimelineRequest: CreateOnboardingTimelineRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/hosted/onboarding/timeline"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createOnboardingTimelineRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**
     initiate the attestation challenge
     
     - parameter getDeviceAttestationChallengeRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: DeviceAttestationChallengeResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedUserAttestDeviceChallengePost(getDeviceAttestationChallengeRequest: GetDeviceAttestationChallengeRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> DeviceAttestationChallengeResponse {
        return try await hostedUserAttestDeviceChallengePostWithRequestBuilder(getDeviceAttestationChallengeRequest: getDeviceAttestationChallengeRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     initiate the attestation challenge
     - POST /hosted/user/attest_device/challenge
     - Generate a device attestation challenge
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter getDeviceAttestationChallengeRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<DeviceAttestationChallengeResponse> 
     */
    open class func hostedUserAttestDeviceChallengePostWithRequestBuilder(getDeviceAttestationChallengeRequest: GetDeviceAttestationChallengeRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<DeviceAttestationChallengeResponse> {
        let localVariablePath = "/hosted/user/attest_device/challenge"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getDeviceAttestationChallengeRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeviceAttestationChallengeResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**
     receive the attestation
     
     - parameter createDeviceAttestationRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedUserAttestDevicePost(createDeviceAttestationRequest: CreateDeviceAttestationRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedUserAttestDevicePostWithRequestBuilder(createDeviceAttestationRequest: createDeviceAttestationRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     receive the attestation
     - POST /hosted/user/attest_device
     - Parses and accepts a user's onboarding device attestation
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter createDeviceAttestationRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedUserAttestDevicePostWithRequestBuilder(createDeviceAttestationRequest: CreateDeviceAttestationRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/hosted/user/attest_device"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createDeviceAttestationRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: [AuthMethod]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedUserAuthMethodsGet_0(openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> [AuthMethod] {
        return try await hostedUserAuthMethodsGet_0WithRequestBuilder(openAPIClient: openAPIClient).execute().body
    }

    /**
     - GET /hosted/user/auth_methods
     - Returns information about the auth methods this user has registered.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<[AuthMethod]> 
     */
    open class func hostedUserAuthMethodsGet_0WithRequestBuilder(openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<[AuthMethod]> {
        let localVariablePath = "/hosted/user/auth_methods"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AuthMethod]>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: AuthRequirementsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedUserAuthRequirementsGet_0(openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> AuthRequirementsResponse {
        return try await hostedUserAuthRequirementsGet_0WithRequestBuilder(openAPIClient: openAPIClient).execute().body
    }

    /**
     - GET /hosted/user/auth_requirements
     - Returns the set of auth requirements to satisfy the auth portion of the playbook in the provided session
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<AuthRequirementsResponse> 
     */
    open class func hostedUserAuthRequirementsGet_0WithRequestBuilder(openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<AuthRequirementsResponse> {
        let localVariablePath = "/hosted/user/auth_requirements"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthRequirementsResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: [AuthorizedOrg]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedUserAuthorizedOrgsGet_0(openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> [AuthorizedOrg] {
        return try await hostedUserAuthorizedOrgsGet_0WithRequestBuilder(openAPIClient: openAPIClient).execute().body
    }

    /**
     - GET /hosted/user/authorized_orgs
     - Returns a list of organizations onto which the user has onboarded
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<[AuthorizedOrg]> 
     */
    open class func hostedUserAuthorizedOrgsGet_0WithRequestBuilder(openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<[AuthorizedOrg]> {
        let localVariablePath = "/hosted/user/authorized_orgs"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AuthorizedOrg]>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter userChallengeRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: UserChallengeResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedUserChallengePost_0(userChallengeRequest: UserChallengeRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> UserChallengeResponse {
        return try await hostedUserChallengePost_0WithRequestBuilder(userChallengeRequest: userChallengeRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/user/challenge
     - Sends a challenge of the requested kind
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter userChallengeRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<UserChallengeResponse> 
     */
    open class func hostedUserChallengePost_0WithRequestBuilder(userChallengeRequest: UserChallengeRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<UserChallengeResponse> {
        let localVariablePath = "/hosted/user/challenge"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userChallengeRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserChallengeResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter userChallengeVerifyRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedUserChallengeVerifyPost_0(userChallengeVerifyRequest: UserChallengeVerifyRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedUserChallengeVerifyPost_0WithRequestBuilder(userChallengeVerifyRequest: userChallengeVerifyRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/user/challenge/verify
     - Verify the previously sent challenge and attach the new form of contact info to the vault
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter userChallengeVerifyRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedUserChallengeVerifyPost_0WithRequestBuilder(userChallengeVerifyRequest: UserChallengeVerifyRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/hosted/user/challenge/verify"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userChallengeVerifyRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter consentRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedUserConsentPost_0(consentRequest: ConsentRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedUserConsentPost_0WithRequestBuilder(consentRequest: consentRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/user/consent
     - Records a user's consent to collection of their images.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter consentRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedUserConsentPost_0WithRequestBuilder(consentRequest: ConsentRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/hosted/user/consent"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: consentRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter id: (path)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: DocumentResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedUserDocumentsIdProcessPost_0(id: String, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> DocumentResponse {
        return try await hostedUserDocumentsIdProcessPost_0WithRequestBuilder(id: id, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/user/documents/{id}/process
     - Process the document and run any vendor verifications.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter id: (path)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<DocumentResponse> 
     */
    open class func hostedUserDocumentsIdProcessPost_0WithRequestBuilder(id: String, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<DocumentResponse> {
        var localVariablePath = "/hosted/user/documents/{id}/process"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DocumentResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**
     * enum for parameter side
     */
    public enum Side_hostedUserDocumentsIdUploadSidePost_0: String, CaseIterable {
        case front = "front"
        case back = "back"
        case selfie = "selfie"
    }

    /**

     - parameter id: (path)  
     - parameter side: (path)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedUserDocumentsIdUploadSidePost_0(id: String, side: Side_hostedUserDocumentsIdUploadSidePost_0, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedUserDocumentsIdUploadSidePost_0WithRequestBuilder(id: id, side: side, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/user/documents/{id}/upload/{side}
     - Upload an image for the given side to the provided document.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter id: (path)  
     - parameter side: (path)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedUserDocumentsIdUploadSidePost_0WithRequestBuilder(id: String, side: Side_hostedUserDocumentsIdUploadSidePost_0, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        var localVariablePath = "/hosted/user/documents/{id}/upload/{side}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let sidePreEscape = "\(side.rawValue)"
        let sidePostEscape = sidePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{side}", with: sidePostEscape, options: .literal, range: nil)
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter createDocumentRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: CreateDocumentResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedUserDocumentsPost_0(createDocumentRequest: CreateDocumentRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> CreateDocumentResponse {
        return try await hostedUserDocumentsPost_0WithRequestBuilder(createDocumentRequest: createDocumentRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/user/documents
     - Create a new document for the outstanding document request
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter createDocumentRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<CreateDocumentResponse> 
     */
    open class func hostedUserDocumentsPost_0WithRequestBuilder(createDocumentRequest: CreateDocumentRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<CreateDocumentResponse> {
        let localVariablePath = "/hosted/user/documents"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createDocumentRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateDocumentResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter emailVerifyRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedUserEmailVerifyPost_0(emailVerifyRequest: EmailVerifyRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedUserEmailVerifyPost_0WithRequestBuilder(emailVerifyRequest: emailVerifyRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/user/email/verify
     - Used to asynchronously verify a user's email address. Requires the token sent to the users email.
     - parameter emailVerifyRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedUserEmailVerifyPost_0WithRequestBuilder(emailVerifyRequest: EmailVerifyRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/hosted/user/email/verify"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: emailVerifyRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, openAPIClient: openAPIClient)
    }

    /**

     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedUserPrivateInfoGet_0(openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) {
        return try await hostedUserPrivateInfoGet_0WithRequestBuilder(openAPIClient: openAPIClient).execute().body
    }

    /**
     - GET /hosted/user/private_info
     - Returns information about the auth token. Can only be used in sandbox mode for demo tenants.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func hostedUserPrivateInfoGet_0WithRequestBuilder(openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/hosted/user/private_info"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = openAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: GetUserTokenResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedUserTokenGet_0(openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> GetUserTokenResponse {
        return try await hostedUserTokenGet_0WithRequestBuilder(openAPIClient: openAPIClient).execute().body
    }

    /**
     - GET /hosted/user/token
     - Returns information about a given auth token.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<GetUserTokenResponse> 
     */
    open class func hostedUserTokenGet_0WithRequestBuilder(openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<GetUserTokenResponse> {
        let localVariablePath = "/hosted/user/token"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetUserTokenResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**
     * enum for parameter documentIdentifier
     */
    public enum DocumentIdentifier_hostedUserUploadDocumentIdentifierPost_0: String, CaseIterable {
        case idPeriodFirstName = "id.first_name"
        case idPeriodMiddleName = "id.middle_name"
        case idPeriodLastName = "id.last_name"
        case idPeriodDob = "id.dob"
        case idPeriodSsn4 = "id.ssn4"
        case idPeriodSsn9 = "id.ssn9"
        case idPeriodAddressLine1 = "id.address_line1"
        case idPeriodAddressLine2 = "id.address_line2"
        case idPeriodCity = "id.city"
        case idPeriodState = "id.state"
        case idPeriodZip = "id.zip"
        case idPeriodCountry = "id.country"
        case idPeriodEmail = "id.email"
        case idPeriodPhoneNumber = "id.phone_number"
        case idPeriodUsLegalStatus = "id.us_legal_status"
        case idPeriodVisaKind = "id.visa_kind"
        case idPeriodVisaExpirationDate = "id.visa_expiration_date"
        case idPeriodNationality = "id.nationality"
        case idPeriodCitizenships = "id.citizenships"
        case idPeriodDriversLicenseNumber = "id.drivers_license_number"
        case idPeriodDriversLicenseState = "id.drivers_license_state"
        case idPeriodItin = "id.itin"
        case idPeriodUsTaxId = "id.us_tax_id"
        case businessPeriodName = "business.name"
        case businessPeriodDba = "business.dba"
        case businessPeriodWebsite = "business.website"
        case businessPeriodPhoneNumber = "business.phone_number"
        case businessPeriodTin = "business.tin"
        case businessPeriodAddressLine1 = "business.address_line1"
        case businessPeriodAddressLine2 = "business.address_line2"
        case businessPeriodCity = "business.city"
        case businessPeriodState = "business.state"
        case businessPeriodZip = "business.zip"
        case businessPeriodCountry = "business.country"
        case businessPeriodBeneficialOwners = "business.beneficial_owners"
        case businessPeriodKycedBeneficialOwners = "business.kyced_beneficial_owners"
        case businessPeriodCorporationType = "business.corporation_type"
        case businessPeriodFormationState = "business.formation_state"
        case businessPeriodFormationDate = "business.formation_date"
        case customPeriodStar = "custom.*"
        case investorProfilePeriodEmploymentStatus = "investor_profile.employment_status"
        case investorProfilePeriodOccupation = "investor_profile.occupation"
        case investorProfilePeriodEmployer = "investor_profile.employer"
        case investorProfilePeriodAnnualIncome = "investor_profile.annual_income"
        case investorProfilePeriodNetWorth = "investor_profile.net_worth"
        case investorProfilePeriodInvestmentGoals = "investor_profile.investment_goals"
        case investorProfilePeriodRiskTolerance = "investor_profile.risk_tolerance"
        case investorProfilePeriodDeclarations = "investor_profile.declarations"
        case investorProfilePeriodBrokerageFirmEmployer = "investor_profile.brokerage_firm_employer"
        case investorProfilePeriodSeniorExecutiveSymbols = "investor_profile.senior_executive_symbols"
        case investorProfilePeriodFamilyMemberNames = "investor_profile.family_member_names"
        case investorProfilePeriodPoliticalOrganization = "investor_profile.political_organization"
        case investorProfilePeriodFundingSources = "investor_profile.funding_sources"
        case documentPeriodIdCardPeriodFrontPeriodImage = "document.id_card.front.image"
        case documentPeriodIdCardPeriodFrontPeriodMimeType = "document.id_card.front.mime_type"
        case documentPeriodIdCardPeriodBackPeriodImage = "document.id_card.back.image"
        case documentPeriodIdCardPeriodBackPeriodMimeType = "document.id_card.back.mime_type"
        case documentPeriodIdCardPeriodSelfiePeriodImage = "document.id_card.selfie.image"
        case documentPeriodIdCardPeriodSelfiePeriodMimeType = "document.id_card.selfie.mime_type"
        case documentPeriodIdCardPeriodFullName = "document.id_card.full_name"
        case documentPeriodIdCardPeriodDob = "document.id_card.dob"
        case documentPeriodIdCardPeriodGender = "document.id_card.gender"
        case documentPeriodIdCardPeriodFullAddress = "document.id_card.full_address"
        case documentPeriodIdCardPeriodDocumentNumber = "document.id_card.document_number"
        case documentPeriodIdCardPeriodExpiresAt = "document.id_card.expires_at"
        case documentPeriodIdCardPeriodIssuedAt = "document.id_card.issued_at"
        case documentPeriodIdCardPeriodIssuingState = "document.id_card.issuing_state"
        case documentPeriodIdCardPeriodIssuingCountry = "document.id_card.issuing_country"
        case documentPeriodIdCardPeriodRefNumber = "document.id_card.ref_number"
        case documentPeriodIdCardPeriodNationality = "document.id_card.nationality"
        case documentPeriodIdCardPeriodCurp = "document.id_card.curp"
        case documentPeriodIdCardPeriodClassifiedDocumentType = "document.id_card.classified_document_type"
        case documentPeriodIdCardPeriodCurpValidationResponse = "document.id_card.curp_validation_response"
        case documentPeriodDriversLicensePeriodFrontPeriodImage = "document.drivers_license.front.image"
        case documentPeriodDriversLicensePeriodFrontPeriodMimeType = "document.drivers_license.front.mime_type"
        case documentPeriodDriversLicensePeriodBackPeriodImage = "document.drivers_license.back.image"
        case documentPeriodDriversLicensePeriodBackPeriodMimeType = "document.drivers_license.back.mime_type"
        case documentPeriodDriversLicensePeriodSelfiePeriodImage = "document.drivers_license.selfie.image"
        case documentPeriodDriversLicensePeriodSelfiePeriodMimeType = "document.drivers_license.selfie.mime_type"
        case documentPeriodDriversLicensePeriodFullName = "document.drivers_license.full_name"
        case documentPeriodDriversLicensePeriodDob = "document.drivers_license.dob"
        case documentPeriodDriversLicensePeriodGender = "document.drivers_license.gender"
        case documentPeriodDriversLicensePeriodFullAddress = "document.drivers_license.full_address"
        case documentPeriodDriversLicensePeriodDocumentNumber = "document.drivers_license.document_number"
        case documentPeriodDriversLicensePeriodExpiresAt = "document.drivers_license.expires_at"
        case documentPeriodDriversLicensePeriodIssuedAt = "document.drivers_license.issued_at"
        case documentPeriodDriversLicensePeriodIssuingState = "document.drivers_license.issuing_state"
        case documentPeriodDriversLicensePeriodIssuingCountry = "document.drivers_license.issuing_country"
        case documentPeriodDriversLicensePeriodRefNumber = "document.drivers_license.ref_number"
        case documentPeriodDriversLicensePeriodNationality = "document.drivers_license.nationality"
        case documentPeriodDriversLicensePeriodCurp = "document.drivers_license.curp"
        case documentPeriodDriversLicensePeriodClassifiedDocumentType = "document.drivers_license.classified_document_type"
        case documentPeriodDriversLicensePeriodCurpValidationResponse = "document.drivers_license.curp_validation_response"
        case documentPeriodPassportPeriodFrontPeriodImage = "document.passport.front.image"
        case documentPeriodPassportPeriodFrontPeriodMimeType = "document.passport.front.mime_type"
        case documentPeriodPassportPeriodBackPeriodImage = "document.passport.back.image"
        case documentPeriodPassportPeriodBackPeriodMimeType = "document.passport.back.mime_type"
        case documentPeriodPassportPeriodSelfiePeriodImage = "document.passport.selfie.image"
        case documentPeriodPassportPeriodSelfiePeriodMimeType = "document.passport.selfie.mime_type"
        case documentPeriodPassportPeriodFullName = "document.passport.full_name"
        case documentPeriodPassportPeriodDob = "document.passport.dob"
        case documentPeriodPassportPeriodGender = "document.passport.gender"
        case documentPeriodPassportPeriodFullAddress = "document.passport.full_address"
        case documentPeriodPassportPeriodDocumentNumber = "document.passport.document_number"
        case documentPeriodPassportPeriodExpiresAt = "document.passport.expires_at"
        case documentPeriodPassportPeriodIssuedAt = "document.passport.issued_at"
        case documentPeriodPassportPeriodIssuingState = "document.passport.issuing_state"
        case documentPeriodPassportPeriodIssuingCountry = "document.passport.issuing_country"
        case documentPeriodPassportPeriodRefNumber = "document.passport.ref_number"
        case documentPeriodPassportPeriodNationality = "document.passport.nationality"
        case documentPeriodPassportPeriodCurp = "document.passport.curp"
        case documentPeriodPassportPeriodClassifiedDocumentType = "document.passport.classified_document_type"
        case documentPeriodPassportPeriodCurpValidationResponse = "document.passport.curp_validation_response"
        case documentPeriodPassportCardPeriodFrontPeriodImage = "document.passport_card.front.image"
        case documentPeriodPassportCardPeriodFrontPeriodMimeType = "document.passport_card.front.mime_type"
        case documentPeriodPassportCardPeriodBackPeriodImage = "document.passport_card.back.image"
        case documentPeriodPassportCardPeriodBackPeriodMimeType = "document.passport_card.back.mime_type"
        case documentPeriodPassportCardPeriodSelfiePeriodImage = "document.passport_card.selfie.image"
        case documentPeriodPassportCardPeriodSelfiePeriodMimeType = "document.passport_card.selfie.mime_type"
        case documentPeriodPassportCardPeriodFullName = "document.passport_card.full_name"
        case documentPeriodPassportCardPeriodDob = "document.passport_card.dob"
        case documentPeriodPassportCardPeriodGender = "document.passport_card.gender"
        case documentPeriodPassportCardPeriodFullAddress = "document.passport_card.full_address"
        case documentPeriodPassportCardPeriodDocumentNumber = "document.passport_card.document_number"
        case documentPeriodPassportCardPeriodExpiresAt = "document.passport_card.expires_at"
        case documentPeriodPassportCardPeriodIssuedAt = "document.passport_card.issued_at"
        case documentPeriodPassportCardPeriodIssuingState = "document.passport_card.issuing_state"
        case documentPeriodPassportCardPeriodIssuingCountry = "document.passport_card.issuing_country"
        case documentPeriodPassportCardPeriodRefNumber = "document.passport_card.ref_number"
        case documentPeriodPassportCardPeriodNationality = "document.passport_card.nationality"
        case documentPeriodPassportCardPeriodCurp = "document.passport_card.curp"
        case documentPeriodPassportCardPeriodClassifiedDocumentType = "document.passport_card.classified_document_type"
        case documentPeriodPassportCardPeriodCurpValidationResponse = "document.passport_card.curp_validation_response"
        case documentPeriodPermitPeriodFrontPeriodImage = "document.permit.front.image"
        case documentPeriodPermitPeriodFrontPeriodMimeType = "document.permit.front.mime_type"
        case documentPeriodPermitPeriodBackPeriodImage = "document.permit.back.image"
        case documentPeriodPermitPeriodBackPeriodMimeType = "document.permit.back.mime_type"
        case documentPeriodPermitPeriodSelfiePeriodImage = "document.permit.selfie.image"
        case documentPeriodPermitPeriodSelfiePeriodMimeType = "document.permit.selfie.mime_type"
        case documentPeriodPermitPeriodFullName = "document.permit.full_name"
        case documentPeriodPermitPeriodDob = "document.permit.dob"
        case documentPeriodPermitPeriodGender = "document.permit.gender"
        case documentPeriodPermitPeriodFullAddress = "document.permit.full_address"
        case documentPeriodPermitPeriodDocumentNumber = "document.permit.document_number"
        case documentPeriodPermitPeriodExpiresAt = "document.permit.expires_at"
        case documentPeriodPermitPeriodIssuedAt = "document.permit.issued_at"
        case documentPeriodPermitPeriodIssuingState = "document.permit.issuing_state"
        case documentPeriodPermitPeriodIssuingCountry = "document.permit.issuing_country"
        case documentPeriodPermitPeriodRefNumber = "document.permit.ref_number"
        case documentPeriodPermitPeriodNationality = "document.permit.nationality"
        case documentPeriodPermitPeriodCurp = "document.permit.curp"
        case documentPeriodPermitPeriodClassifiedDocumentType = "document.permit.classified_document_type"
        case documentPeriodPermitPeriodCurpValidationResponse = "document.permit.curp_validation_response"
        case documentPeriodVisaPeriodFrontPeriodImage = "document.visa.front.image"
        case documentPeriodVisaPeriodFrontPeriodMimeType = "document.visa.front.mime_type"
        case documentPeriodVisaPeriodBackPeriodImage = "document.visa.back.image"
        case documentPeriodVisaPeriodBackPeriodMimeType = "document.visa.back.mime_type"
        case documentPeriodVisaPeriodSelfiePeriodImage = "document.visa.selfie.image"
        case documentPeriodVisaPeriodSelfiePeriodMimeType = "document.visa.selfie.mime_type"
        case documentPeriodVisaPeriodFullName = "document.visa.full_name"
        case documentPeriodVisaPeriodDob = "document.visa.dob"
        case documentPeriodVisaPeriodGender = "document.visa.gender"
        case documentPeriodVisaPeriodFullAddress = "document.visa.full_address"
        case documentPeriodVisaPeriodDocumentNumber = "document.visa.document_number"
        case documentPeriodVisaPeriodExpiresAt = "document.visa.expires_at"
        case documentPeriodVisaPeriodIssuedAt = "document.visa.issued_at"
        case documentPeriodVisaPeriodIssuingState = "document.visa.issuing_state"
        case documentPeriodVisaPeriodIssuingCountry = "document.visa.issuing_country"
        case documentPeriodVisaPeriodRefNumber = "document.visa.ref_number"
        case documentPeriodVisaPeriodNationality = "document.visa.nationality"
        case documentPeriodVisaPeriodCurp = "document.visa.curp"
        case documentPeriodVisaPeriodClassifiedDocumentType = "document.visa.classified_document_type"
        case documentPeriodVisaPeriodCurpValidationResponse = "document.visa.curp_validation_response"
        case documentPeriodResidenceDocumentPeriodFrontPeriodImage = "document.residence_document.front.image"
        case documentPeriodResidenceDocumentPeriodFrontPeriodMimeType = "document.residence_document.front.mime_type"
        case documentPeriodResidenceDocumentPeriodBackPeriodImage = "document.residence_document.back.image"
        case documentPeriodResidenceDocumentPeriodBackPeriodMimeType = "document.residence_document.back.mime_type"
        case documentPeriodResidenceDocumentPeriodSelfiePeriodImage = "document.residence_document.selfie.image"
        case documentPeriodResidenceDocumentPeriodSelfiePeriodMimeType = "document.residence_document.selfie.mime_type"
        case documentPeriodResidenceDocumentPeriodFullName = "document.residence_document.full_name"
        case documentPeriodResidenceDocumentPeriodDob = "document.residence_document.dob"
        case documentPeriodResidenceDocumentPeriodGender = "document.residence_document.gender"
        case documentPeriodResidenceDocumentPeriodFullAddress = "document.residence_document.full_address"
        case documentPeriodResidenceDocumentPeriodDocumentNumber = "document.residence_document.document_number"
        case documentPeriodResidenceDocumentPeriodExpiresAt = "document.residence_document.expires_at"
        case documentPeriodResidenceDocumentPeriodIssuedAt = "document.residence_document.issued_at"
        case documentPeriodResidenceDocumentPeriodIssuingState = "document.residence_document.issuing_state"
        case documentPeriodResidenceDocumentPeriodIssuingCountry = "document.residence_document.issuing_country"
        case documentPeriodResidenceDocumentPeriodRefNumber = "document.residence_document.ref_number"
        case documentPeriodResidenceDocumentPeriodNationality = "document.residence_document.nationality"
        case documentPeriodResidenceDocumentPeriodCurp = "document.residence_document.curp"
        case documentPeriodResidenceDocumentPeriodClassifiedDocumentType = "document.residence_document.classified_document_type"
        case documentPeriodResidenceDocumentPeriodCurpValidationResponse = "document.residence_document.curp_validation_response"
        case documentPeriodVoterIdentificationPeriodFrontPeriodImage = "document.voter_identification.front.image"
        case documentPeriodVoterIdentificationPeriodFrontPeriodMimeType = "document.voter_identification.front.mime_type"
        case documentPeriodVoterIdentificationPeriodBackPeriodImage = "document.voter_identification.back.image"
        case documentPeriodVoterIdentificationPeriodBackPeriodMimeType = "document.voter_identification.back.mime_type"
        case documentPeriodVoterIdentificationPeriodSelfiePeriodImage = "document.voter_identification.selfie.image"
        case documentPeriodVoterIdentificationPeriodSelfiePeriodMimeType = "document.voter_identification.selfie.mime_type"
        case documentPeriodVoterIdentificationPeriodFullName = "document.voter_identification.full_name"
        case documentPeriodVoterIdentificationPeriodDob = "document.voter_identification.dob"
        case documentPeriodVoterIdentificationPeriodGender = "document.voter_identification.gender"
        case documentPeriodVoterIdentificationPeriodFullAddress = "document.voter_identification.full_address"
        case documentPeriodVoterIdentificationPeriodDocumentNumber = "document.voter_identification.document_number"
        case documentPeriodVoterIdentificationPeriodExpiresAt = "document.voter_identification.expires_at"
        case documentPeriodVoterIdentificationPeriodIssuedAt = "document.voter_identification.issued_at"
        case documentPeriodVoterIdentificationPeriodIssuingState = "document.voter_identification.issuing_state"
        case documentPeriodVoterIdentificationPeriodIssuingCountry = "document.voter_identification.issuing_country"
        case documentPeriodVoterIdentificationPeriodRefNumber = "document.voter_identification.ref_number"
        case documentPeriodVoterIdentificationPeriodNationality = "document.voter_identification.nationality"
        case documentPeriodVoterIdentificationPeriodCurp = "document.voter_identification.curp"
        case documentPeriodVoterIdentificationPeriodClassifiedDocumentType = "document.voter_identification.classified_document_type"
        case documentPeriodVoterIdentificationPeriodCurpValidationResponse = "document.voter_identification.curp_validation_response"
        case documentPeriodFinraComplianceLetter = "document.finra_compliance_letter"
        case documentPeriodProofOfAddressPeriodImage = "document.proof_of_address.image"
        case documentPeriodSsnCardPeriodImage = "document.ssn_card.image"
        case documentPeriodCustomPeriodStar = "document.custom.*"
        case cardPeriodStarPeriodNumber = "card.*.number"
        case cardPeriodStarPeriodExpiration = "card.*.expiration"
        case cardPeriodStarPeriodCvc = "card.*.cvc"
        case cardPeriodStarPeriodName = "card.*.name"
        case cardPeriodStarPeriodBillingAddressPeriodZip = "card.*.billing_address.zip"
        case cardPeriodStarPeriodBillingAddressPeriodCountry = "card.*.billing_address.country"
        case cardPeriodStarPeriodExpirationMonth = "card.*.expiration_month"
        case cardPeriodStarPeriodExpirationYear = "card.*.expiration_year"
        case cardPeriodStarPeriodNumberLast4 = "card.*.number_last4"
        case cardPeriodStarPeriodIssuer = "card.*.issuer"
        case bankPeriodStarPeriodName = "bank.*.name"
        case bankPeriodStarPeriodAchRoutingNumber = "bank.*.ach_routing_number"
        case bankPeriodStarPeriodAchAccountNumber = "bank.*.ach_account_number"
        case bankPeriodStarPeriodAchAccountId = "bank.*.ach_account_id"
        case bankPeriodStarPeriodAccountType = "bank.*.account_type"
    }

    /**

     - parameter documentIdentifier: (path)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedUserUploadDocumentIdentifierPost_0(documentIdentifier: DocumentIdentifier_hostedUserUploadDocumentIdentifierPost_0, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedUserUploadDocumentIdentifierPost_0WithRequestBuilder(documentIdentifier: documentIdentifier, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/user/upload/{document_identifier}
     - POSTs a document to the vault
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter documentIdentifier: (path)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedUserUploadDocumentIdentifierPost_0WithRequestBuilder(documentIdentifier: DocumentIdentifier_hostedUserUploadDocumentIdentifierPost_0, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        var localVariablePath = "/hosted/user/upload/{document_identifier}"
        let documentIdentifierPreEscape = "\(documentIdentifier.rawValue)"
        let documentIdentifierPostEscape = documentIdentifierPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{document_identifier}", with: documentIdentifierPostEscape, options: .literal, range: nil)
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter body: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedUserVaultValidatePost_0(body: VaultData, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedUserVaultValidatePost_0WithRequestBuilder(body: body, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/user/vault/validate
     - Checks if provided vault data is valid before adding it to the vault
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter body: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedUserVaultValidatePost_0WithRequestBuilder(body: VaultData, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/hosted/user/vault/validate"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter xOnboardingConfigKey: (header)  
     - parameter identifyRequest: (body)  
     - parameter xSandboxId: (header) When provided, creates a sandbox user with the provided sandbox ID. Sandbox IDs allow you to create multiple users with the same contact info. In order to log in using an existing sandbox user, you can provide its Sandbox ID in the Footprint flow.              (optional)
     - parameter xFpAuthorization: (header)  (optional)
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: IdentifyResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func identify_0(xOnboardingConfigKey: String, identifyRequest: IdentifyRequest, xSandboxId: String? = nil, xFpAuthorization: String? = nil, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> IdentifyResponse {
        return try await identify_0WithRequestBuilder(xOnboardingConfigKey: xOnboardingConfigKey, identifyRequest: identifyRequest, xSandboxId: xSandboxId, xFpAuthorization: xFpAuthorization, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/identify
     - Tries to identify an existing user by either phone number or email. If the user is found, returns available challenge kinds.
     - API Key:
       - type: apiKey X-Onboarding-Config-Key (HEADER)
       - name: OnboardingConfigPublishableKey
     - API Key:
       - type: apiKey X-Onboarding-Session-Token (HEADER)
       - name: OnboardingConfigToken
     - API Key:
       - type: apiKey X-Kyb-Bo-Token (HEADER)
       - name: BusinessOwnerToken
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter xOnboardingConfigKey: (header)  
     - parameter identifyRequest: (body)  
     - parameter xSandboxId: (header) When provided, creates a sandbox user with the provided sandbox ID. Sandbox IDs allow you to create multiple users with the same contact info. In order to log in using an existing sandbox user, you can provide its Sandbox ID in the Footprint flow.              (optional)
     - parameter xFpAuthorization: (header)  (optional)
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<IdentifyResponse> 
     */
    open class func identify_0WithRequestBuilder(xOnboardingConfigKey: String, identifyRequest: IdentifyRequest, xSandboxId: String? = nil, xFpAuthorization: String? = nil, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<IdentifyResponse> {
        let localVariablePath = "/hosted/identify"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: identifyRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-Sandbox-Id": xSandboxId?.encodeToJSON(codableHelper: openAPIClient.codableHelper),
            "X-Onboarding-Config-Key": xOnboardingConfigKey.encodeToJSON(codableHelper: openAPIClient.codableHelper),
            "X-Fp-Authorization": xFpAuthorization?.encodeToJSON(codableHelper: openAPIClient.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IdentifyResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**
     Login Challenge
     
     - parameter xFpAuthorization: (header)  
     - parameter loginChallengeRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: LoginChallengeResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func loginChallenge_0(xFpAuthorization: String, loginChallengeRequest: LoginChallengeRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> LoginChallengeResponse {
        return try await loginChallenge_0WithRequestBuilder(xFpAuthorization: xFpAuthorization, loginChallengeRequest: loginChallengeRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     Login Challenge
     - POST /hosted/identify/login_challenge
     - Sends a challenge to the phone number and returns an HTTP 200. When the challenge is completed through the identify/verify endpoint, the client can get or create the user with this phone number.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter xFpAuthorization: (header)  
     - parameter loginChallengeRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<LoginChallengeResponse> 
     */
    open class func loginChallenge_0WithRequestBuilder(xFpAuthorization: String, loginChallengeRequest: LoginChallengeRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<LoginChallengeResponse> {
        let localVariablePath = "/hosted/identify/login_challenge"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: loginChallengeRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-Fp-Authorization": xFpAuthorization.encodeToJSON(codableHelper: openAPIClient.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LoginChallengeResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter xFpAuthorization: (header)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: OnboardingStatusResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func onboardingStatus_0(xFpAuthorization: String, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> OnboardingStatusResponse {
        return try await onboardingStatus_0WithRequestBuilder(xFpAuthorization: xFpAuthorization, openAPIClient: openAPIClient).execute().body
    }

    /**
     - GET /hosted/onboarding/status
     - Returns the status of the onboarding.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter xFpAuthorization: (header)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<OnboardingStatusResponse> 
     */
    open class func onboardingStatus_0WithRequestBuilder(xFpAuthorization: String, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<OnboardingStatusResponse> {
        let localVariablePath = "/hosted/onboarding/status"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Fp-Authorization": xFpAuthorization.encodeToJSON(codableHelper: openAPIClient.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OnboardingStatusResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter xFpAuthorization: (header)  
     - parameter postOnboardingRequest: (body)  (optional)
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: OnboardingResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func onboarding_0(xFpAuthorization: String, postOnboardingRequest: PostOnboardingRequest? = nil, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> OnboardingResponse {
        return try await onboarding_0WithRequestBuilder(xFpAuthorization: xFpAuthorization, postOnboardingRequest: postOnboardingRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/onboarding
     - Gets or creates the Onboarding for this (user, ob_config) pair.
     - API Key:
       - type: apiKey X-Onboarding-Config-Key (HEADER)
       - name: OnboardingConfigPublishableKey
     - API Key:
       - type: apiKey X-Onboarding-Session-Token (HEADER)
       - name: OnboardingConfigToken
     - API Key:
       - type: apiKey X-Kyb-Bo-Token (HEADER)
       - name: BusinessOwnerToken
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter xFpAuthorization: (header)  
     - parameter postOnboardingRequest: (body)  (optional)
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<OnboardingResponse> 
     */
    open class func onboarding_0WithRequestBuilder(xFpAuthorization: String, postOnboardingRequest: PostOnboardingRequest? = nil, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<OnboardingResponse> {
        let localVariablePath = "/hosted/onboarding"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postOnboardingRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-Fp-Authorization": xFpAuthorization.encodeToJSON(codableHelper: openAPIClient.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OnboardingResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: GetSdkArgsTokenResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func orgSdkArgsGet_0(openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> GetSdkArgsTokenResponse {
        return try await orgSdkArgsGet_0WithRequestBuilder(openAPIClient: openAPIClient).execute().body
    }

    /**
     - GET /org/sdk_args
     - Fetch information from an existing SDK args session.
     - API Key:
       - type: apiKey X-Fp-Sdk-Args-Token (HEADER)
       - name: SDKArgsToken
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<GetSdkArgsTokenResponse> 
     */
    open class func orgSdkArgsGet_0WithRequestBuilder(openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<GetSdkArgsTokenResponse> {
        let localVariablePath = "/org/sdk_args"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetSdkArgsTokenResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter body: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: CreateSdkArgsTokenResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func orgSdkArgsPost_0(body: String, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> CreateSdkArgsTokenResponse {
        return try await orgSdkArgsPost_0WithRequestBuilder(body: body, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /org/sdk_args
     - Create a new session containing args for the SDK.
     - parameter body: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<CreateSdkArgsTokenResponse> 
     */
    open class func orgSdkArgsPost_0WithRequestBuilder(body: String, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<CreateSdkArgsTokenResponse> {
        let localVariablePath = "/org/sdk_args"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateSdkArgsTokenResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, openAPIClient: openAPIClient)
    }

    /**

     - parameter logBody: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func orgSdkTelemetryPost_0(logBody: LogBody, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await orgSdkTelemetryPost_0WithRequestBuilder(logBody: logBody, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /org/sdk_telemetry
     - Log contents of the HTTP body. 
     - parameter logBody: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func orgSdkTelemetryPost_0WithRequestBuilder(logBody: LogBody, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/org/sdk_telemetry"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: logBody, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, openAPIClient: openAPIClient)
    }

    /**

     - parameter xFpAuthorization: (header)  
     - parameter processRequest: (body)  (optional)
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func process_0(xFpAuthorization: String, processRequest: ProcessRequest? = nil, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await process_0WithRequestBuilder(xFpAuthorization: xFpAuthorization, processRequest: processRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/onboarding/process
     - Continue processing the onboarding after user this stage of user input has finished
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter xFpAuthorization: (header)  
     - parameter processRequest: (body)  (optional)
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func process_0WithRequestBuilder(xFpAuthorization: String, processRequest: ProcessRequest? = nil, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/hosted/onboarding/process"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-Fp-Authorization": xFpAuthorization.encodeToJSON(codableHelper: openAPIClient.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**
     Signup Challenge
     
     - parameter xOnboardingConfigKey: (header)  
     - parameter signupChallengeRequest: (body)  
     - parameter xSandboxId: (header) When provided, creates a sandbox user with the provided sandbox ID. Sandbox IDs allow you to create multiple users with the same contact info. In order to log in using an existing sandbox user, you can provide its Sandbox ID in the Footprint flow.              (optional)
     - parameter xFpIsComponentsSdk: (header) When a non-empty value is provided, indicates that the request is originating from the components SDK (optional)
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: SignupChallengeResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func signupChallenge_0(xOnboardingConfigKey: String, signupChallengeRequest: SignupChallengeRequest, xSandboxId: String? = nil, xFpIsComponentsSdk: Bool? = nil, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> SignupChallengeResponse {
        return try await signupChallenge_0WithRequestBuilder(xOnboardingConfigKey: xOnboardingConfigKey, signupChallengeRequest: signupChallengeRequest, xSandboxId: xSandboxId, xFpIsComponentsSdk: xFpIsComponentsSdk, openAPIClient: openAPIClient).execute().body
    }

    /**
     Signup Challenge
     - POST /hosted/identify/signup_challenge
     - Sends a challenge to a phone number or email and returns an HTTP 200. When the challenge is completed through the identify/verify endpoint, the client can begin onboarding the user.
     - API Key:
       - type: apiKey X-Onboarding-Config-Key (HEADER)
       - name: OnboardingConfigPublishableKey
     - API Key:
       - type: apiKey X-Onboarding-Session-Token (HEADER)
       - name: OnboardingConfigToken
     - API Key:
       - type: apiKey X-Kyb-Bo-Token (HEADER)
       - name: BusinessOwnerToken
     - parameter xOnboardingConfigKey: (header)  
     - parameter signupChallengeRequest: (body)  
     - parameter xSandboxId: (header) When provided, creates a sandbox user with the provided sandbox ID. Sandbox IDs allow you to create multiple users with the same contact info. In order to log in using an existing sandbox user, you can provide its Sandbox ID in the Footprint flow.              (optional)
     - parameter xFpIsComponentsSdk: (header) When a non-empty value is provided, indicates that the request is originating from the components SDK (optional)
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<SignupChallengeResponse> 
     */
    open class func signupChallenge_0WithRequestBuilder(xOnboardingConfigKey: String, signupChallengeRequest: SignupChallengeRequest, xSandboxId: String? = nil, xFpIsComponentsSdk: Bool? = nil, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<SignupChallengeResponse> {
        let localVariablePath = "/hosted/identify/signup_challenge"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: signupChallengeRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-Sandbox-Id": xSandboxId?.encodeToJSON(codableHelper: openAPIClient.codableHelper),
            "X-Fp-Is-Components-Sdk": xFpIsComponentsSdk?.encodeToJSON(codableHelper: openAPIClient.codableHelper),
            "X-Onboarding-Config-Key": xOnboardingConfigKey.encodeToJSON(codableHelper: openAPIClient.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SignupChallengeResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter xFpAuthorization: (header)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: HostedValidateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func validateOnboarding_0(xFpAuthorization: String, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> HostedValidateResponse {
        return try await validateOnboarding_0WithRequestBuilder(xFpAuthorization: xFpAuthorization, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/onboarding/validate
     - Finish onboarding the user. Returns the validation token that can be exchanged for a permanent Footprint user token.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter xFpAuthorization: (header)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<HostedValidateResponse> 
     */
    open class func validateOnboarding_0WithRequestBuilder(xFpAuthorization: String, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<HostedValidateResponse> {
        let localVariablePath = "/hosted/onboarding/validate"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Fp-Authorization": xFpAuthorization.encodeToJSON(codableHelper: openAPIClient.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<HostedValidateResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**
     Get Validation Token
     
     - parameter xFpAuthorization: (header)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: HostedValidateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func validationToken_0(xFpAuthorization: String, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> HostedValidateResponse {
        return try await validationToken_0WithRequestBuilder(xFpAuthorization: xFpAuthorization, openAPIClient: openAPIClient).execute().body
    }

    /**
     Get Validation Token
     - POST /hosted/identify/validation_token
     - Generate a validation token after the user finishes the identify flow.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter xFpAuthorization: (header)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<HostedValidateResponse> 
     */
    open class func validationToken_0WithRequestBuilder(xFpAuthorization: String, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<HostedValidateResponse> {
        let localVariablePath = "/hosted/identify/validation_token"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Fp-Authorization": xFpAuthorization.encodeToJSON(codableHelper: openAPIClient.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<HostedValidateResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter xFpAuthorization: (header)  
     - parameter body: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func vault_0(xFpAuthorization: String, body: VaultData, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await vault_0WithRequestBuilder(xFpAuthorization: xFpAuthorization, body: body, openAPIClient: openAPIClient).execute().body
    }

    /**
     - PATCH /hosted/user/vault
     - Updates data in a user vault
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter xFpAuthorization: (header)  
     - parameter body: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func vault_0WithRequestBuilder(xFpAuthorization: String, body: VaultData, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/hosted/user/vault"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-Fp-Authorization": xFpAuthorization.encodeToJSON(codableHelper: openAPIClient.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter xFpAuthorization: (header)  
     - parameter createUserTokenRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: CreateUserTokenResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func vaultingToken_0(xFpAuthorization: String, createUserTokenRequest: CreateUserTokenRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> CreateUserTokenResponse {
        return try await vaultingToken_0WithRequestBuilder(xFpAuthorization: xFpAuthorization, createUserTokenRequest: createUserTokenRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/user/tokens
     - Create a new token with the requested scopes using the permissions granted by the existing token. Used to create a secondary token with more limited scope. The new token's expiry time is the same as the old token's
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter xFpAuthorization: (header)  
     - parameter createUserTokenRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<CreateUserTokenResponse> 
     */
    open class func vaultingToken_0WithRequestBuilder(xFpAuthorization: String, createUserTokenRequest: CreateUserTokenRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<CreateUserTokenResponse> {
        let localVariablePath = "/hosted/user/tokens"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createUserTokenRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-Fp-Authorization": xFpAuthorization.encodeToJSON(codableHelper: openAPIClient.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateUserTokenResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**
     Verify
     
     - parameter xFpAuthorization: (header)  
     - parameter xOnboardingConfigKey: (header)  
     - parameter identifyVerifyRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: IdentifyVerifyResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func verify_0(xFpAuthorization: String, xOnboardingConfigKey: String, identifyVerifyRequest: IdentifyVerifyRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> IdentifyVerifyResponse {
        return try await verify_0WithRequestBuilder(xFpAuthorization: xFpAuthorization, xOnboardingConfigKey: xOnboardingConfigKey, identifyVerifyRequest: identifyVerifyRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     Verify
     - POST /hosted/identify/verify
     - Verifies the response to either an SMS or biometric challenge. When the challenge response is verified, we will return an auth token for the user. If no user exists (which may only happen after a phone challenge), we will create a new user with the provided phone number
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter xFpAuthorization: (header)  
     - parameter xOnboardingConfigKey: (header)  
     - parameter identifyVerifyRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<IdentifyVerifyResponse> 
     */
    open class func verify_0WithRequestBuilder(xFpAuthorization: String, xOnboardingConfigKey: String, identifyVerifyRequest: IdentifyVerifyRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<IdentifyVerifyResponse> {
        let localVariablePath = "/hosted/identify/verify"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: identifyVerifyRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-Fp-Authorization": xFpAuthorization.encodeToJSON(codableHelper: openAPIClient.codableHelper),
            "X-Onboarding-Config-Key": xOnboardingConfigKey.encodeToJSON(codableHelper: openAPIClient.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IdentifyVerifyResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }
}
