//
// OnboardingAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class OnboardingAPI {

    /**
     Onboarding Config
     
     - parameter xOnboardingConfigKey: (header)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: PublicOnboardingConfiguration
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getOnboardingConfig(xOnboardingConfigKey: String, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> PublicOnboardingConfiguration {
        return try await getOnboardingConfigWithRequestBuilder(xOnboardingConfigKey: xOnboardingConfigKey, openAPIClient: openAPIClient).execute().body
    }

    /**
     Onboarding Config
     - GET /hosted/onboarding/config
     - Get the details of an onboarding configuration.
     - API Key:
       - type: apiKey X-Onboarding-Config-Key (HEADER)
       - name: OnboardingConfigPublishableKey
     - API Key:
       - type: apiKey X-Onboarding-Session-Token (HEADER)
       - name: OnboardingConfigToken
     - API Key:
       - type: apiKey X-Kyb-Bo-Token (HEADER)
       - name: BusinessOwnerToken
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter xOnboardingConfigKey: (header)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<PublicOnboardingConfiguration> 
     */
    open class func getOnboardingConfigWithRequestBuilder(xOnboardingConfigKey: String, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<PublicOnboardingConfiguration> {
        let localVariablePath = "/hosted/onboarding/config"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Onboarding-Config-Key": xOnboardingConfigKey.encodeToJSON(codableHelper: openAPIClient.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PublicOnboardingConfiguration>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedOnboardingAuthorizePost(openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedOnboardingAuthorizePostWithRequestBuilder(openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/onboarding/authorize
     - Mark the onboarding as authorized and initiate IDV checks
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedOnboardingAuthorizePostWithRequestBuilder(openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/hosted/onboarding/authorize"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter fingerprintVisitRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedOnboardingFpPost(fingerprintVisitRequest: FingerprintVisitRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedOnboardingFpPostWithRequestBuilder(fingerprintVisitRequest: fingerprintVisitRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/onboarding/fp
     - Records a fingerprint visitorID for the Fingerprint SDK in the frontend
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter fingerprintVisitRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedOnboardingFpPostWithRequestBuilder(fingerprintVisitRequest: FingerprintVisitRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/hosted/onboarding/fp"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: fingerprintVisitRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: NeuroIdentityIdResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedOnboardingNidGet(openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> NeuroIdentityIdResponse {
        return try await hostedOnboardingNidGetWithRequestBuilder(openAPIClient: openAPIClient).execute().body
    }

    /**
     - GET /hosted/onboarding/nid
     - Retrieve identifier used for NeuroId
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<NeuroIdentityIdResponse> 
     */
    open class func hostedOnboardingNidGetWithRequestBuilder(openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<NeuroIdentityIdResponse> {
        let localVariablePath = "/hosted/onboarding/nid"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NeuroIdentityIdResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedOnboardingPrivacyPassGet(openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) {
        return try await hostedOnboardingPrivacyPassGetWithRequestBuilder(openAPIClient: openAPIClient).execute().body
    }

    /**
     - GET /hosted/onboarding/privacy_pass
     - initiates privacy pass protocol.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<Void> 
     */
    open class func hostedOnboardingPrivacyPassGetWithRequestBuilder(openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<Void> {
        let localVariablePath = "/hosted/onboarding/privacy_pass"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = openAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter socureDeviceSessionIdRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedOnboardingSdsPost(socureDeviceSessionIdRequest: SocureDeviceSessionIdRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedOnboardingSdsPostWithRequestBuilder(socureDeviceSessionIdRequest: socureDeviceSessionIdRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/onboarding/sds
     - Records a deviceSessionId from the Socure Device SDK in the frontend
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter socureDeviceSessionIdRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedOnboardingSdsPostWithRequestBuilder(socureDeviceSessionIdRequest: SocureDeviceSessionIdRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/hosted/onboarding/sds"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: socureDeviceSessionIdRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: OnboardingSessionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedOnboardingSessionGet(openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> OnboardingSessionResponse {
        return try await hostedOnboardingSessionGetWithRequestBuilder(openAPIClient: openAPIClient).execute().body
    }

    /**
     - GET /hosted/onboarding/session
     - Fetch information from an existing onboarding session token.
     - API Key:
       - type: apiKey X-Fp-Ob-Token (HEADER)
       - name: Onboardingtoken
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<OnboardingSessionResponse> 
     */
    open class func hostedOnboardingSessionGetWithRequestBuilder(openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<OnboardingSessionResponse> {
        let localVariablePath = "/hosted/onboarding/session"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OnboardingSessionResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter skipPasskeyRegisterRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedOnboardingSkipPasskeyRegisterPost(skipPasskeyRegisterRequest: SkipPasskeyRegisterRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedOnboardingSkipPasskeyRegisterPostWithRequestBuilder(skipPasskeyRegisterRequest: skipPasskeyRegisterRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/onboarding/skip_passkey_register
     - Tells us that a passkey registration was skipped
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter skipPasskeyRegisterRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedOnboardingSkipPasskeyRegisterPostWithRequestBuilder(skipPasskeyRegisterRequest: SkipPasskeyRegisterRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/hosted/onboarding/skip_passkey_register"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: skipPasskeyRegisterRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter stytchTelemetryRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedOnboardingTelPost(stytchTelemetryRequest: StytchTelemetryRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedOnboardingTelPostWithRequestBuilder(stytchTelemetryRequest: stytchTelemetryRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/onboarding/tel
     - Performs a lookup with Stytch on the passed up telemetry_id and records the response + risk signals
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter stytchTelemetryRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedOnboardingTelPostWithRequestBuilder(stytchTelemetryRequest: StytchTelemetryRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/hosted/onboarding/tel"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: stytchTelemetryRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter createOnboardingTimelineRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hostedOnboardingTimelinePost(createOnboardingTimelineRequest: CreateOnboardingTimelineRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await hostedOnboardingTimelinePostWithRequestBuilder(createOnboardingTimelineRequest: createOnboardingTimelineRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/onboarding/timeline
     - Log a timeline event for this user using a frontend-provided page identifier
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter createOnboardingTimelineRequest: (body)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func hostedOnboardingTimelinePostWithRequestBuilder(createOnboardingTimelineRequest: CreateOnboardingTimelineRequest, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/hosted/onboarding/timeline"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createOnboardingTimelineRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter xFpAuthorization: (header)  
     - parameter postOnboardingRequest: (body)  (optional)
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: OnboardingResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func onboarding(xFpAuthorization: String, postOnboardingRequest: PostOnboardingRequest? = nil, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> OnboardingResponse {
        return try await onboardingWithRequestBuilder(xFpAuthorization: xFpAuthorization, postOnboardingRequest: postOnboardingRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/onboarding
     - Gets or creates the Onboarding for this (user, ob_config) pair.
     - API Key:
       - type: apiKey X-Onboarding-Config-Key (HEADER)
       - name: OnboardingConfigPublishableKey
     - API Key:
       - type: apiKey X-Onboarding-Session-Token (HEADER)
       - name: OnboardingConfigToken
     - API Key:
       - type: apiKey X-Kyb-Bo-Token (HEADER)
       - name: BusinessOwnerToken
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter xFpAuthorization: (header)  
     - parameter postOnboardingRequest: (body)  (optional)
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<OnboardingResponse> 
     */
    open class func onboardingWithRequestBuilder(xFpAuthorization: String, postOnboardingRequest: PostOnboardingRequest? = nil, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<OnboardingResponse> {
        let localVariablePath = "/hosted/onboarding"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postOnboardingRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-Fp-Authorization": xFpAuthorization.encodeToJSON(codableHelper: openAPIClient.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OnboardingResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter xFpAuthorization: (header)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: OnboardingStatusResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func onboardingStatus(xFpAuthorization: String, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> OnboardingStatusResponse {
        return try await onboardingStatusWithRequestBuilder(xFpAuthorization: xFpAuthorization, openAPIClient: openAPIClient).execute().body
    }

    /**
     - GET /hosted/onboarding/status
     - Returns the status of the onboarding.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter xFpAuthorization: (header)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<OnboardingStatusResponse> 
     */
    open class func onboardingStatusWithRequestBuilder(xFpAuthorization: String, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<OnboardingStatusResponse> {
        let localVariablePath = "/hosted/onboarding/status"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Fp-Authorization": xFpAuthorization.encodeToJSON(codableHelper: openAPIClient.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OnboardingStatusResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter xFpAuthorization: (header)  
     - parameter processRequest: (body)  (optional)
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: JSONValue
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func process(xFpAuthorization: String, processRequest: ProcessRequest? = nil, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> JSONValue {
        return try await processWithRequestBuilder(xFpAuthorization: xFpAuthorization, processRequest: processRequest, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/onboarding/process
     - Continue processing the onboarding after user this stage of user input has finished
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - parameter xFpAuthorization: (header)  
     - parameter processRequest: (body)  (optional)
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<JSONValue> 
     */
    open class func processWithRequestBuilder(xFpAuthorization: String, processRequest: ProcessRequest? = nil, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<JSONValue> {
        let localVariablePath = "/hosted/onboarding/process"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: processRequest, codableHelper: openAPIClient.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "X-Fp-Authorization": xFpAuthorization.encodeToJSON(codableHelper: openAPIClient.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JSONValue>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }

    /**

     - parameter xFpAuthorization: (header)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: HostedValidateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func validateOnboarding(xFpAuthorization: String, openAPIClient: OpenAPIClient = OpenAPIClient.shared) async throws(ErrorResponse) -> HostedValidateResponse {
        return try await validateOnboardingWithRequestBuilder(xFpAuthorization: xFpAuthorization, openAPIClient: openAPIClient).execute().body
    }

    /**
     - POST /hosted/onboarding/validate
     - Finish onboarding the user. Returns the validation token that can be exchanged for a permanent Footprint user token.
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserOnboardingToken
     - API Key:
       - type: apiKey X-Fp-Authorization (HEADER)
       - name: UserToken
     - parameter xFpAuthorization: (header)  
     - parameter openAPIClient: The OpenAPIClient that contains the configuration for the http request.
     - returns: RequestBuilder<HostedValidateResponse> 
     */
    open class func validateOnboardingWithRequestBuilder(xFpAuthorization: String, openAPIClient: OpenAPIClient = OpenAPIClient.shared) -> RequestBuilder<HostedValidateResponse> {
        let localVariablePath = "/hosted/onboarding/validate"
        let localVariableURLString = openAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Fp-Authorization": xFpAuthorization.encodeToJSON(codableHelper: openAPIClient.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<HostedValidateResponse>.Type = openAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, openAPIClient: openAPIClient)
    }
}
