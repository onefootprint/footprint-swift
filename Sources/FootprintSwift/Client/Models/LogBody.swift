//
// LogBody.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct LogBody: Codable, JSONEncodable, Hashable {

    public var logLevel: String?
    public var logMessage: String?
    /** Really SdkArgsKind, but prefer for this telemetry API to be unopinionated on validation */
    public var sdkKind: String?
    public var sdkName: String?
    public var sdkVersion: String?
    public var sessionId: String?
    public var tenantDomain: String?

    public init(logLevel: String? = nil, logMessage: String? = nil, sdkKind: String? = nil, sdkName: String? = nil, sdkVersion: String? = nil, sessionId: String? = nil, tenantDomain: String? = nil) {
        self.logLevel = logLevel
        self.logMessage = logMessage
        self.sdkKind = sdkKind
        self.sdkName = sdkName
        self.sdkVersion = sdkVersion
        self.sessionId = sessionId
        self.tenantDomain = tenantDomain
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case logLevel = "log_level"
        case logMessage = "log_message"
        case sdkKind = "sdk_kind"
        case sdkName = "sdk_name"
        case sdkVersion = "sdk_version"
        case sessionId = "session_id"
        case tenantDomain = "tenant_domain"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(logLevel, forKey: .logLevel)
        try container.encodeIfPresent(logMessage, forKey: .logMessage)
        try container.encodeIfPresent(sdkKind, forKey: .sdkKind)
        try container.encodeIfPresent(sdkName, forKey: .sdkName)
        try container.encodeIfPresent(sdkVersion, forKey: .sdkVersion)
        try container.encodeIfPresent(sessionId, forKey: .sessionId)
        try container.encodeIfPresent(tenantDomain, forKey: .tenantDomain)
    }
}

